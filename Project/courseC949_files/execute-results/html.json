{
  "hash": "e7eca569c7486d01449f301689a5c9d4",
  "result": {
    "engine": "knitr",
    "markdown": "# DSA I {.unnumbered}\n\n\n\n::: {.lead}\n\nData Structures and Algorithms I (C949)\n\n:::\n\n<br>\n\n## Explains Algorithms (29%)\n\n<br>\n\n#### Characteristics of Algorithms\n\n::: {.callout-note title=\"Names\" collapse=\"true\" appearance=\"simple\" icon=\"false\" style=\"border-left:none; border-right:none; border-top:none; border-bottom:none;\"}\n\n**Finiteness**\n\nAn algorithm must always have a finite number of steps before it ends. When the \noperation is finished, it must have a defined endpoint or output and not enter \nan endless loop.\n\n**Definiteness**\n\nAn algorithm needs to have exact definitions for each step. Clear and \nstraightforward directions ensure that every step is understood and can be \ntaken easily.\n\n**Input**\n\nAn algorithm requires one or more inputs. The values that are first supplied to \nthe algorithm before its processing are known as inputs. These inputs come from \na predetermined range of acceptable values.\n\n**Output**\n\nOne or more outputs must be produced by an algorithm. The output is the outcome \nof the algorithm after every step has been completed. The relationship between \nthe input and the result should be clear.\n\n**Effectiveness**\n\nAn algorithm's stages must be sufficiently straightforward to be carried out in \na finite time utilizing fundamental operations. With the resources at hand, \nevery operation in the algorithm should be doable and practicable.\n\n**Generality**\n\nRather than being limited to a single particular case, an algorithm should be \nable to solve a group of issues. It should offer a generic fix that manages a \nvariety of inputs inside a predetermined range or domain.\n\n:::\n\n<br>\n\n#### Factors of an Algorithm\n\n::: {.callout-note title=\"Factors\" collapse=\"true\" appearance=\"simple\" icon=\"false\" style=\"border-left:none; border-right:none; border-top:none; border-bottom:none;\"}\n`**Modularity**`\n\nThis feature was perfectly designed for the algorithm if you are given a problem and break it down into small-small modules or small-small steps, which is a basic definition of an algorithm.\n\n**Correctness**\n\nAn algorithm's correctness is defined as when the given inputs produce the desired output, indicating that the algorithm was designed correctly. An algorithm's analysis has been completed correctly.\n\n**Maintainability**\n\nIt means that the algorithm should be designed in a straightforward, structured way so that when you redefine the algorithm, no significant changes are made to the algorithm.\n\n**Functionality**\n\nIt takes into account various logical steps to solve a real-world problem.\n\n**Robustness**\n\nRobustness refers to an algorithm's ability to define your problem clearly.\n\n**User-friendly**\n\nIf the algorithm is difficult to understand, the designer will not explain it to the programmer.\n\n**Simplicity**\n\nIf an algorithm is simple, it is simple to understand.\n\n`**Extensibility**`\n\nYour algorithm should be extensible if another algorithm designer or programmer wants to use it.\n:::\n\n<br>\n\n#### Types of Algorithms\n\n<br>\n\n::: {.lead}\n##### Types\n:::\n\n::: {.panel-tabset}\n\n## Type-1\n\n<br>\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"vembedr\">\n<div>\n<iframe src=\"https://www.youtube.com/embed/BYWf6-tpQ4k\" width=\"560\" height=\"315\" frameborder=\"0\" allowfullscreen=\"\" data-external=\"1\"></iframe>\n</div>\n</div>\n```\n\n:::\n:::\n\n\n**Brute Force Algorithm**\n\nA straightforward approach that exhaustively tries all possible solutions, \nsuitable for small problem instances but may become impractical for larger \nones due to its high time complexity.\n\n---\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"vembedr\">\n<div>\n<iframe src=\"https://www.youtube.com/embed/ivl5-snqul8\" width=\"560\" height=\"315\" frameborder=\"0\" allowfullscreen=\"\" data-external=\"1\"></iframe>\n</div>\n</div>\n```\n\n:::\n:::\n\n\n\n**Recursive Algorithm**\n\nA method that breaks a problem into smaller, similar subproblems and repeatedly \napplies itself to solve them until reaching a base case, making it effective \nfor tasks with recursive structures.\n\n---\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"vembedr\">\n<div>\n<iframe src=\"https://www.youtube.com/embed/0TCY1rfpjxc\" width=\"560\" height=\"315\" frameborder=\"0\" allowfullscreen=\"\" data-external=\"1\"></iframe>\n</div>\n</div>\n```\n\n:::\n:::\n\n\n\n**Encryption Algorithm** \n\nUtilized to transform data into a secure, unreadable form using cryptographic \ntechniques, ensuring confidentiality and privacy in digital communications and \ntransactions.\n\n## Type-2\n\n<br>\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"vembedr\">\n<div>\n<iframe src=\"https://www.youtube.com/embed/RtpJOGvfo7E\" width=\"560\" height=\"315\" frameborder=\"0\" allowfullscreen=\"\" data-external=\"1\"></iframe>\n</div>\n</div>\n```\n\n:::\n:::\n\n\n\n**Backtracking Algorithm**\n\nA trial-and-error technique used to explore potential solutions by undoing \nchoices when they lead to an incorrect outcome, commonly employed in puzzles \nand optimization problems.\n\n---\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"vembedr\">\n<div>\n<iframe src=\"https://www.youtube.com/embed/ZpFqAoO4YPc\" width=\"560\" height=\"315\" frameborder=\"0\" allowfullscreen=\"\" data-external=\"1\"></iframe>\n</div>\n</div>\n```\n\n:::\n:::\n\n\n\n**Searching Algorithm**\n\nDesigned to find a specific target within a data set, enabling efficient \nretrieval of information from sorted or unsorted collections.\n\n---\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"vembedr\">\n<div>\n<iframe src=\"https://www.youtube.com/embed/rbbTd-gkajw\" width=\"560\" height=\"315\" frameborder=\"0\" allowfullscreen=\"\" data-external=\"1\"></iframe>\n</div>\n</div>\n```\n\n:::\n:::\n\n\n\n**Sorting Algorithm**\n\nAimed at arranging elements in a specific order, like numerical or alphabetical, \nto enhance data organization and retrieval.\n\n## Type-3\n\n<br>\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"vembedr\">\n<div>\n<iframe src=\"https://www.youtube.com/embed/WEILxTBDy0Y\" width=\"560\" height=\"315\" frameborder=\"0\" allowfullscreen=\"\" data-external=\"1\"></iframe>\n</div>\n</div>\n```\n\n:::\n:::\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"vembedr\">\n<div>\n<iframe src=\"https://www.youtube.com/embed/FsfRsGFHuv4\" width=\"560\" height=\"315\" frameborder=\"0\" allowfullscreen=\"\" data-external=\"1\"></iframe>\n</div>\n</div>\n```\n\n:::\n:::\n\n\n\n**Hashing Algorithm** \n\nConverts data into a fixed-size hash value, enabling rapid data access and \nretrieval in hash tables, commonly used in databases and password storage.\n\n---\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"vembedr\">\n<div>\n<iframe src=\"https://www.youtube.com/embed/ib4BHvr5-Ao\" width=\"560\" height=\"315\" frameborder=\"0\" allowfullscreen=\"\" data-external=\"1\"></iframe>\n</div>\n</div>\n```\n\n:::\n:::\n\n\n\n**Divide & Conquer Algorithm**\n\nBreaks a complex problem into smaller subproblems, solves them independently, \nand then combines their solutions to address the original problem effectively.\n\n---\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"vembedr\">\n<div>\n<iframe src=\"https://www.youtube.com/embed/hDDrIw_DSto\" width=\"560\" height=\"315\" frameborder=\"0\" allowfullscreen=\"\" data-external=\"1\"></iframe>\n</div>\n</div>\n```\n\n:::\n:::\n\n\n\n**Greedy Algorithm**\n\nMakes locally optimal choices at each step in the hope of finding a global \noptimum, useful for optimization problems but may not always lead to the best \nsolution.\n\n## Type-4\n\n<br>\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"vembedr\">\n<div>\n<iframe src=\"https://www.youtube.com/embed/vYquumk4nWw\" width=\"560\" height=\"315\" frameborder=\"0\" allowfullscreen=\"\" data-external=\"1\"></iframe>\n</div>\n</div>\n```\n\n:::\n:::\n\n\n\n**Dynamic Programming Algorithm**\n\nStores and reuses intermediate results to avoid redundant computations, \nenhancing the efficiency of solving complex problems.\n\n---\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"vembedr\">\n<div>\n<iframe src=\"https://www.youtube.com/embed/8t9RaIQzp_o\" width=\"560\" height=\"315\" frameborder=\"0\" allowfullscreen=\"\" data-external=\"1\"></iframe>\n</div>\n</div>\n```\n\n:::\n:::\n\n\n\n**Randomized Algorithm**\n\nUtilizes randomness in its steps to achieve a solution, often used in situations \nwhere an approximate or probabilistic answer suffices.\n\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"site_libs/vembedr-0.1.5/css/vembedr.css\" rel=\"stylesheet\" />\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}