{
  "hash": "f2b56ec78a2310fd9e54f7e47bfd4306",
  "result": {
    "engine": "knitr",
    "markdown": "# DSA I {.unnumbered}\n\n\n\n::: {.lead}\n\nData Structures and Algorithms I (C949)\n\n:::\n\n<br>\n\n## Explains Algorithms (29%)\n\n\n#### Characteristics of Algorithms\n\n::: {.callout-note title=\"Names\" collapse=\"true\" appearance=\"simple\" icon=\"false\" style=\"border-left:none; border-right:none; border-top:none; border-bottom:none;\"}\n\n<br>\n\n**Finiteness**\n\nAn algorithm must always have a finite number of steps before it ends. When the \noperation is finished, it must have a defined endpoint or output and not enter \nan endless loop.\n\n**Definiteness**\n\nAn algorithm needs to have exact definitions for each step. Clear and \nstraightforward directions ensure that every step is understood and can be \ntaken easily.\n\n**Input**\n\nAn algorithm requires one or more inputs. The values that are first supplied to \nthe algorithm before its processing are known as inputs. These inputs come from \na predetermined range of acceptable values.\n\n**Output**\n\nOne or more outputs must be produced by an algorithm. The output is the outcome \nof the algorithm after every step has been completed. The relationship between \nthe input and the result should be clear.\n\n**Effectiveness**\n\nAn algorithm's stages must be sufficiently straightforward to be carried out in \na finite time utilizing fundamental operations. With the resources at hand, \nevery operation in the algorithm should be doable and practicable.\n\n**Generality**\n\nRather than being limited to a single particular case, an algorithm should be \nable to solve a group of issues. It should offer a generic fix that manages a \nvariety of inputs inside a predetermined range or domain.\n\n:::\n\n#### Factors of an Algorithm\n\n::: {.callout-note title=\"Factors\" collapse=\"true\" appearance=\"simple\" icon=\"false\" style=\"border-left:none; border-right:none; border-top:none; border-bottom:none;\"}\n\n<br>\n\n`**Modularity**`\n\nThis feature was perfectly designed for the algorithm if you are given a problem and break it down into small-small modules or small-small steps, which is a basic definition of an algorithm.\n\n**Correctness**\n\nAn algorithm's correctness is defined as when the given inputs produce the desired output, indicating that the algorithm was designed correctly. An algorithm's analysis has been completed correctly.\n\n**Maintainability**\n\nIt means that the algorithm should be designed in a straightforward, structured way so that when you redefine the algorithm, no significant changes are made to the algorithm.\n\n**Functionality**\n\nIt takes into account various logical steps to solve a real-world problem.\n\n**Robustness**\n\nRobustness refers to an algorithm's ability to define your problem clearly.\n\n**User-friendly**\n\nIf the algorithm is difficult to understand, the designer will not explain it to the programmer.\n\n**Simplicity**\n\nIf an algorithm is simple, it is simple to understand.\n\n`**Extensibility**`\n\nYour algorithm should be extensible if another algorithm designer or programmer wants to use it.\n\n<br>\n\n:::\n\n#### Types of Algorithms\n\n<br>\n\n::: {.panel-tabset}\n\n## Type-1\n\n<br>\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"vembedr\">\n<div>\n<iframe src=\"https://www.youtube.com/embed/BYWf6-tpQ4k\" width=\"560\" height=\"315\" frameborder=\"0\" allowfullscreen=\"\" data-external=\"1\"></iframe>\n</div>\n</div>\n```\n\n:::\n:::\n\n\n<br>\n\n**Brute Force Algorithm**\n\nA straightforward approach that exhaustively tries all possible solutions, \nsuitable for small problem instances but may become impractical for larger \nones due to its high time complexity.\n\n---\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"vembedr\">\n<div>\n<iframe src=\"https://www.youtube.com/embed/ivl5-snqul8\" width=\"560\" height=\"315\" frameborder=\"0\" allowfullscreen=\"\" data-external=\"1\"></iframe>\n</div>\n</div>\n```\n\n:::\n:::\n\n\n<br>\n\n**Recursive Algorithm**\n\nA method that breaks a problem into smaller, similar subproblems and repeatedly \napplies itself to solve them until reaching a base case, making it effective \nfor tasks with recursive structures.\n\n---\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"vembedr\">\n<div>\n<iframe src=\"https://www.youtube.com/embed/0TCY1rfpjxc\" width=\"560\" height=\"315\" frameborder=\"0\" allowfullscreen=\"\" data-external=\"1\"></iframe>\n</div>\n</div>\n```\n\n:::\n:::\n\n\n<br>\n\n**Encryption Algorithm** \n\nUtilized to transform data into a secure, unreadable form using cryptographic \ntechniques, ensuring confidentiality and privacy in digital communications and \ntransactions.\n\n## Type-2\n\n<br>\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"vembedr\">\n<div>\n<iframe src=\"https://www.youtube.com/embed/RtpJOGvfo7E\" width=\"560\" height=\"315\" frameborder=\"0\" allowfullscreen=\"\" data-external=\"1\"></iframe>\n</div>\n</div>\n```\n\n:::\n:::\n\n\n<br>\n\n**Backtracking Algorithm**\n\nA trial-and-error technique used to explore potential solutions by undoing \nchoices when they lead to an incorrect outcome, commonly employed in puzzles \nand optimization problems.\n\n---\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"vembedr\">\n<div>\n<iframe src=\"https://www.youtube.com/embed/ZpFqAoO4YPc\" width=\"560\" height=\"315\" frameborder=\"0\" allowfullscreen=\"\" data-external=\"1\"></iframe>\n</div>\n</div>\n```\n\n:::\n:::\n\n\n<br>\n\n**Searching Algorithm**\n\nDesigned to find a specific target within a data set, enabling efficient \nretrieval of information from sorted or unsorted collections.\n\n---\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"vembedr\">\n<div>\n<iframe src=\"https://www.youtube.com/embed/rbbTd-gkajw\" width=\"560\" height=\"315\" frameborder=\"0\" allowfullscreen=\"\" data-external=\"1\"></iframe>\n</div>\n</div>\n```\n\n:::\n:::\n\n\n<br>\n\n**Sorting Algorithm**\n\nAimed at arranging elements in a specific order, like numerical or alphabetical, \nto enhance data organization and retrieval.\n\n## Type-3\n\n<br>\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"vembedr\">\n<div>\n<iframe src=\"https://www.youtube.com/embed/WEILxTBDy0Y\" width=\"560\" height=\"315\" frameborder=\"0\" allowfullscreen=\"\" data-external=\"1\"></iframe>\n</div>\n</div>\n```\n\n:::\n:::\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"vembedr\">\n<div>\n<iframe src=\"https://www.youtube.com/embed/FsfRsGFHuv4\" width=\"560\" height=\"315\" frameborder=\"0\" allowfullscreen=\"\" data-external=\"1\"></iframe>\n</div>\n</div>\n```\n\n:::\n:::\n\n\n<br>\n\n**Hashing Algorithm** \n\nConverts data into a fixed-size hash value, enabling rapid data access and \nretrieval in hash tables, commonly used in databases and password storage.\n\n---\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"vembedr\">\n<div>\n<iframe src=\"https://www.youtube.com/embed/ib4BHvr5-Ao\" width=\"560\" height=\"315\" frameborder=\"0\" allowfullscreen=\"\" data-external=\"1\"></iframe>\n</div>\n</div>\n```\n\n:::\n:::\n\n\n<br>\n\n**Divide & Conquer Algorithm**\n\nBreaks a complex problem into smaller subproblems, solves them independently, \nand then combines their solutions to address the original problem effectively.\n\n---\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"vembedr\">\n<div>\n<iframe src=\"https://www.youtube.com/embed/hDDrIw_DSto\" width=\"560\" height=\"315\" frameborder=\"0\" allowfullscreen=\"\" data-external=\"1\"></iframe>\n</div>\n</div>\n```\n\n:::\n:::\n\n\n<br>\n\n**Greedy Algorithm**\n\nMakes locally optimal choices at each step in the hope of finding a global \noptimum, useful for optimization problems but may not always lead to the best \nsolution.\n\n## Type-4\n\n<br>\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"vembedr\">\n<div>\n<iframe src=\"https://www.youtube.com/embed/vYquumk4nWw\" width=\"560\" height=\"315\" frameborder=\"0\" allowfullscreen=\"\" data-external=\"1\"></iframe>\n</div>\n</div>\n```\n\n:::\n:::\n\n\n<br>\n\n**Dynamic Programming Algorithm**\n\nStores and reuses intermediate results to avoid redundant computations, \nenhancing the efficiency of solving complex problems.\n\n---\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"vembedr\">\n<div>\n<iframe src=\"https://www.youtube.com/embed/8t9RaIQzp_o\" width=\"560\" height=\"315\" frameborder=\"0\" allowfullscreen=\"\" data-external=\"1\"></iframe>\n</div>\n</div>\n```\n\n:::\n:::\n\n\n<br>\n\n**Randomized Algorithm**\n\nUtilizes randomness in its steps to achieve a solution, often used in situations \nwhere an approximate or probabilistic answer suffices.\n\n:::\n\n<br>\n\n#### Recursive Algorithms\n\n<br>\n\n##### Algorithms\n\nRecursive algorithms are a fundamental concept in computer science, particularly \nin the study of data structures and algorithms. A recursive algorithm is one \nthat solves a problem by breaking it down into smaller instances of the same \nproblem, which it then solves in the same way. This process continues until the \nproblem is reduced to a base case, which is solved directly without further \nrecursion.\n\n<br>\n\n::: {.lead}\n##### Key Concepts \n:::\n\n::: {.panel-tabset}\n\n## Base Case\n\nThis is the condition under which the recursion stops. It represents the simplest \ninstance of the problem, which can be solved directly without further recursion.\n\n## Recursive Case\n\nThis is the part of the algorithm that breaks the problem down into smaller \ninstances of the same problem and then calls the algorithm recursively on these \nsmaller instances.\n\n## Stack\n\nEach recursive call is placed on the system call stack. When the base case is \nreached, the stack begins to unwind as each instance of the function returns \nits result.\n\n<br>\n\n:::\n\n<br>\n\n::: {.lead}\n##### Factorial Calculation\n:::\n\nThe factorial of a number n (denoted as n!) is a classic example of a recursive \nalgorithm. The factorial is defined as:\n\n  - O! = 1 *(Base Case)*\n  - N! = n * (n-1)! For n > O *(Recursive Case)*\n\n::: {.panel-tabset}\n\n## Code\n\n\n::: {.cell}\n\n```{.python .cell-code}\ndef factorial(n):\n    if n == 0:  # Base Case\n        return 1\n    else:  # Recursive Case\n        return n * factorial(n - 1)\n```\n:::\n\n\n## Logic\n\n**How It Works:**\n\n  - Base Case: When n is 0, the function returns 1.\n  - Recursive Case: For any other value of n, the function calls itself with n−1 and multiplies the result by n.\n  \nFor example, calling `factorial(3)` would work as follows:\n\n  - `factorial(3)` calls `factorial(2)`\n  - `factorial(2)` calls `factorial(1)`\n  - `factorial(1)` calls `factorial(0)`\n  - `factorial(0)` returns 1, then:\n  - `factorial(1)` returns 1 * 1 = 1\n  - `factorial(2)` returns 2 * 1 = 2\n  - `factorial(3)` returns 3 * 2 = 6\n\n## Pros/Cons\n\n**Advantages of Recursion**\n\n  - **Simplicity:** Recursive solutions are often more elegant and easier to understand than their iterative counterparts.\n  - **Direct Translation:** Some problems are naturally recursive, like tree traversals, making recursion the most straightforward approach.\n\n**Disadvantages of Recursion**\n\n  - **Performance:** Recursive algorithms can be less efficient due to the overhead of multiple function calls and potential stack overflow issues for deep recursion.\n  - **Memory Usage:** Recursion can consume more memory because each function call adds a new frame to the call stack.\n\n## Usage\n\n**When to Use Recursion**\n  - When a problem can naturally be divided into similar sub-problems *(e.g., tree traversal, searching algorithms like binary search)*.\n  - When the recursive solution is significantly simpler or more intuitive than an iterative one.\n\n<br>\n\n:::\n\n<br>\n\n::: {.lead}\n##### Linear & Binary Search\n:::\n\nLinear search and binary search are two fundamental algorithms used to search \nfor an element in a collection, like an array or a list. However, they differ \nsignificantly in how they approach the search and their efficiency.\n\n<br>\n\n::: {.lead}\n###### *Linear Search*\n:::\n\n::: {.panel-tabset}\n\n## Concept\n\n- Linear search is the simplest search algorithm.\n- It works by sequentially checking each element of the array or list until the target element is found or the end of the collection is reached.\n\n## Steps\n\n**Algorithm:**\n\n  1. Start from the first element of the array.\n  2. Compare the current element with the target element.\n  3. If they match, return the index of the element.\n  4. If they don't match, move to the next element and repeat the process.\n  5. If the target element is not found by the end of the array, return a \"not found\" indication.\n\n**Time Complexity:** $O(n)$, where n is the number of elements in the array. This is \nbecause in the worst case, the algorithm may need to check every element in the array.\n\n## Usage\n\n**When to Use:**\n\n  - When the array or list is small.\n  - When the array is unsorted.\n  - When simplicity is more important than performance.\n  \n\n\n::: {.cell}\n\n```{.python .cell-code}\ndef linear_search(arr, target):\n    for i in range(len(arr)):\n        if arr[i] == target:\n            return i\n    return -1  # Return -1 if the element is not found\n```\n:::\n\n\n<br>\n\n:::\n\n<br>\n\n::: {.lead}\n###### *Binary Search*\n:::\n\n::: {.panel-tabset}\n\n## Concept\n\n  - Binary search is much more efficient than linear search but requires the array or list to be sorted.\n  - It works by repeatedly dividing the search interval in half. If the target value is less than the middle element, the search continues in the left half, otherwise in the right half.\n\n## Steps\n\n**Algorithm:**\n\n  1. Start with two pointers, one at the beginning (low) and one at the end (high) of the sorted array.\n  2. Find the middle element of the current interval.\n  3. Compare the middle element with the target:\n      - If they match, return the index of the middle element.\n      - If the target is less than the middle element, repeat the search on the left half.\n      - If the target is greater, repeat the search on the right half.\n  4. If the interval becomes invalid (low > high), return a \"not found\" indication.\n\n\n**Time Complexity:** $\\text{O(log⁡ n)}$, where n is the number of elements in the array. This logarithmic time complexity makes binary search significantly faster than linear search for large data sets.\n\n## Usage\n\n**When to Use:**\n\n  - When the array or list is sorted.\n  - When the array is large and efficiency is crucial.\n  \n\n::: {.cell}\n\n```{.python .cell-code}\ndef binary_search(arr, target):\n    low = 0\n    high = len(arr) - 1\n\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            low = mid + 1\n        else:\n            high = mid - 1\n\n    return -1  # Return -1 if the element is not found\n```\n:::\n\n\n## Compare\n\n**Comparison**\n\n  - **Efficiency:** Binary search is faster than linear search, especially for large data sets, but it requires the array to be sorted.\n  - **Simplicity:** Linear search is simpler to implement and doesn't require the array to be sorted, making it more versatile for smaller or unsorted data sets.\n  - **Use Cases:**\n      - **Linear Search:** Suitable for small or unsorted collections where the simplicity of the algorithm outweighs the need for speed.\n      - **Binary Search:** Ideal for large, sorted collections where performance is a priority.\n\n<br>\n\n:::\n\n<br>\n\n::: {.lead}\n###### *Step-by-Step Guide*\n:::\n\n::: {.panel-tabset}\n\n## Arrays\n\nFiguring out the array elements that correspond to the mid-values in the first \nand second iterations of A binary search\n\n$\\text{ arr = {45, 77, 89, 90, 94, 99, 100} }$ and $\\text{key = 100}$\n\n## Setup\n\n  - The array `arr` is `{45, 77, 89, 90, 94, 99, 100}`.\n  - The `key` to find is `100`.\n  - Initialize two pointers: `low` (start of the array) and `high` (end of the array).\n\n## 1st Iteration\n\n  - Calculate the middle index `mid` using the formula: `mid = (low + high) / 2`\n  - Check the value at `arr[mid]`.\n  - Compare `arr[mid]` with the `key`:\n  \n      - If `arr[mid]` is less than `key`, update `low` to `mid` + 1.\n      - If `arr[mid]` is greater than `key`, update `high` to `mid` - 1.\n      - If `arr[mid]` is equal to `key`, you have found the `key` (though you won't need a second iteration in this case).\n\n## 2nd Iteration\n\n  - Repeat the calculation for `mid` with the updated `low` and `high` values.\n  - Again, compare `arr[mid]` with the `key` and update `low` or `high` accordingly.\n\n<br>\n\n:::\n\n<br>\n\n#### Searching Algorithms\n\n<br>\n\n::: {.lead}\n##### Linear Search\n:::\n\n<br>\n\n::: {.panel-tabset}\n\n## Logic\n\n  - **Concept:** As discussed earlier, linear search involves checking each element in a list or array sequentially until the target element is found or the end of the collection is reached.\n  - **Time Complexity:** $O(n)$, where n is the number of elements.\n\n## Usage\n\n  - **Use Case:** Best used when the list is small or unsorted.\n  \n  - **Distinct Characteristics:**\n  \n      - Simple, sequential search.\n      - Checks each element one by one.\n      - Works on both sorted and unsorted data.\n\n## States\n\n  - **Linear Search Worst, Average and Best**\n  \n      - `**Best Case:**` $O(1)$ — The target element is the first element.\n      - `**Average Case:**` $O(n)$ — The target element is somewhere in the middle or not in the array.\n      - `**Worst Case:**` $O(n)$ — The target element is the last element or not present.\n\n<br>\n\n:::\n\n<br>\n\n::: {.lead}\n##### Binary Search\n:::\n\n<br>\n\n::: {.panel-tabset}\n\n## Logic\n\n  - **Concept:** Binary search operates on a sorted list. It repeatedly divides the search interval in half until the target element is found or the interval is empty.\n  - **Time Complexity:** $\\text{O(log⁡ n)}$\n\n## Usage\n\n  - **Use Case:** Ideal for large, sorted datasets.\n\n  - **Distinct Characteristics:**\n\n      - `Requires a sorted array.`\n      - Divides the search interval in half repeatedly.\n      - Efficient, logarithmic time complexity.\n\n## States\n\n  - **Binary Search Worst, Average and Best**\n\n      - **Best Case:** $O(1)$ — The target element is the middle element.\n      - **Average Case:** $\\text{O(log⁡ n)}$ — The target element is not immediately found but within the sorted array.\n      - **Worst Case:** $\\text{O(log⁡ n)}$ — The target element is at the extreme ends or not present.\n\n<br>\n\n:::\n\n<br>\n\n::: {.lead}\n##### Interpolation Search\n:::\n\n<br>\n\n::: {.panel-tabset}\n\n## Logic\n\n  - **Concept:** Similar to binary search but works on uniformly distributed data. It estimates the position of the target element based on the value.\n  - **Time Complexity:** O(log ⁡log ⁡n) in the best case, $O(n)$ in the worst case.\n\n## Usage\n\n  - **Use Case:** Effective when the data is uniformly distributed.\n\n## States\n\n  - Interpolation Search Worst, Average and Best\n      - **Best Case:** $O(1)$ — The target element is exactly where the interpolation suggests.\n      - **Average Case:** $\\text{O(log ⁡log⁡ n)}$ — Uniformly distributed data.\n      - **Worst Case:** $O(n)$ — Highly skewed data distribution or worst interpolation.\n\n<br>\n\n:::\n\n<br>\n\n::: {.lead}\n##### DFS/BFS\n:::\n\n<br>\n\n::: {.panel-tabset}\n\n## Logic\n\n  - **Concept:** Used primarily in graph and tree data structures. **Depth-First Search (DFS)** explores as far as possible along one branch before backtracking, while **Breadth-First Search (BFS)** explores all neighbors at the present depth before moving on to nodes at the next depth level.\n  - **Time Complexity:** $\\text{O(V + E)}$, where V is the number of vertices and E is the number of edges.\n\n## Usage\n\n  - **Use Case:** Useful for searching nodes in graphs and trees.\n\n## States\n\n  - **(DFS)**\n\n      - **Best Case:** $O(1)$ — The target node is found immediately.\n      - **Average Case:** $\\text{O(V + E)}$— Typically when all nodes and edges must be explored.\n      - **Worst Case:** $\\text{O(V + E)}$ — The target node is the last one discovered.\n\n  - **(BFS)**\n\n      - **Best Case:** $O(1)$ — The target node is the root or the first node checked.\n      - **Average Case:** $\\text{O(V + E)}$ — All nodes and edges need to be explored.\n      - **Worst Case:** $\\text{O(V + E)}$ — The target node is the last one explored.\n\n<br>\n\n:::\n\n<br>\n\n#### Sorting Algorithms\n\nSorting algorithms organize data in a particular order *(usually ascending or descending)*. \nThis makes searching and other operations more efficient.\n\n<br>\n\n::: {.lead}\n##### Bubble Sort\n:::\n\n<br>\n\n::: {.panel-tabset}\n\n## Usage\n\n  - **Use Case:** Simple but inefficient for large datasets. Best used for educational purposes or small lists.\n\n## Descriptor\n\n  - **Distinct Characteristics:**\n\n      - Repeatedly swaps adjacent elements if they are in the wrong order.\n      - Simple, but inefficient for large datasets.\n      - “Bubbles” the largest element to the end of the list.\n\n## States\n\n  - Bubble Sort Worst, Average and Best\n      - **Best Case:** $O(n)$ — The array is already sorted *(with an optimized version that stops early)*.\n      - **Average Case:** $O(n^2)$ — Average case with random elements.\n      - **Worst Case:** $O(n^2)$ — The array is sorted in reverse order.\n\n## Tips\n\n  - **Bubble:** Look for something that swaps so the result can “bubble” to the top. (Swap, Exchange)\n\n<br>\n\n:::\n\n<br>\n\n::: {.lead}\n##### Selection Sort\n:::\n\n<br>\n\n::: {.panel-tabset}\n\n## Usage\n\n  - **Use Case:** Inefficient for large lists, but useful when memory writes are more expensive than comparisons.\n\n## Descriptor\n\n  - **Distinct Characteristics:**\n\n      - Finds the minimum element and swaps it with the first unsorted element.\n      - Reduces the problem size by one in each iteration.\n      - Always performs $O(n^2)$ comparisons, regardless of input.\n\n## States\n\n  - Selection Sort Worst, Average and Best\n\n      - **Best Case:** $O(n^2)$ — Selection sort does not improve with better input, always $O(n^2)$.\n      - **Average Case:** $O(n^2)$ — Average case with random elements.\n      - **Worst Case:** $O(n^2)$ — Selection sort is insensitive to input order.\n\n## Tips\n\n  - **Selection:** Look for code that repeatedly finds the minimum *(or maximum)* element and moves it to the beginning *(or end)* of the list. *(Select minimum, Swap with start)*\n\n<br>\n\n:::\n\n<br>\n\n::: {.lead}\n##### Insertion Sort\n:::\n\n<br>\n\n::: {.panel-tabset}\n\n## Usage\n\n  - **Use Case:** Good for small or nearly sorted lists.\n\n## Descriptor\n\n  - **Distinct Characteristics:**\n\n      - Builds a sorted list one element at a time.\n      - Efficient for small or nearly sorted datasets.\n      - Shifts elements to make space for the current element.\n\n## States\n\n  - **Insertion Sort Worst, Average and Best**\n\n      - **Best Case:** $O(n)$ — The array is already sorted.\n      - **Average Case:** $O(n^2)$ — Average case with random elements.\n      - **Worst Case:** $O(n^2)$ — The array is sorted in reverse order.\n\n## Tips\n\n  - **Insertion:** Look for code that builds a sorted portion of the list one element at a time by inserting each new element into its correct position within the already-sorted part. *(Insert, Shift Element)*\n\n<br>\n\n:::\n\n<br>\n\n::: {.lead}\n##### Merge Sort\n:::\n\n<br>\n\n::: {.panel-tabset}\n\n## Usage\n\n  - **Use Case:** Efficient and stable; good for large datasets.\n\n## Descriptor\n\n  - **Distinct Characteristics:**\n\n      - Divides the list into halves, sorts each half, and then merges them.\n      - Stable and efficient for large datasets.\n      - Requires additional space for merging.\n\n## States\n\n  - **Merge Sort Worst, Average and Best**\n\n      - **Best Case:** $\\text{O(n ⁡log⁡ n)}$ — Merge sort’s time complexity is the same in all cases.\n      - **Average Case:** $\\text{O(n ⁡log⁡ n)}$.\n      - **Worst Case:** $\\text{O(n ⁡log⁡ n)}$.\n\n## Tips\n\n  - **Merge:** Look for something that continually splits a list in half. *(Merge, Split)*\n\n<br>\n\n:::\n\n<br>\n\n::: {.lead}\n##### Quicksort\n:::\n\n<br>\n\n::: {.panel-tabset}\n\n## Usage\n\n  - **Use Case:** Often faster in practice than merge sort but less stable.\n\n## Descriptor\n\n  - **Distinct Characteristics:**\n\n      - Selects a *“pivot”* element and partitions the array around it.\n      - Recursively sorts the partitions.\n      - Efficient, but can degrade to $O(n^2)$ if poor pivot selection occurs.\n\n## States\n\n  - **Quicksort Worst, Average and Best**\n\n      - **Best Case:** $\\text{O(n ⁡log⁡ n)}$ — The pivot splits the array into two nearly equal halves.\n      - **Average Case:** $\\text{O(n ⁡log⁡ n)}$ — Average case with random pivots.\n      - **Worst Case:** $O(n^2)$ — The pivot is always the smallest or largest element, leading to unbalanced partitions.\n\n## Tips\n\n  - **Quicksort:** Look for the keywords *“pivot”* and/or *“split”*. *(Pivot, Split)*\n\n<br>\n\n:::\n\n<br>\n\n::: {.lead}\n##### Heap Sort\n:::\n\n<br>\n\n::: {.panel-tabset}\n\n## Usage\n\n  - **Use Case:** Useful when memory usage is a concern as it’s an in-place algorithm.\n\n## Descriptor\n\n  - **Distinct Characteristics:**\n\n      - Utilizes a binary heap data structure.\n      - Builds a max-heap and repeatedly extracts the maximum element.\n      - Efficient and in-place, but not stable.\n\n## States\n\n  - **Heap Sort Worst, Average and Best**\n\n      - **Best Case:** $\\text{O(n ⁡log⁡ n)}$ — Heap sort’s time complexity is the same in all cases.\n      - **Average Case:** $\\text{O(n ⁡log⁡ n)}$.\n      - **Worst Case:** $\\text{O(n ⁡log⁡ n)}$.\n\n## Tips\n\n  - **Heap Sort:** Look for code that uses a heap data structure to repeatedly extract the maximum *(or minimum)* element and rebuilds the heap. *(Heapify, Extract Max, Build Heap)*\n\n<br>\n\n:::\n\n<br>\n\n::: {.lead}\n##### Counting Sort\n:::\n\n<br>\n\n::: {.panel-tabset}\n\n## Usage\n\n  - Use Case: Efficient for sorting integers or other items with a small range of possible values.\n\n## Descriptor\n\n  - **Distinct Characteristics:**\n\n      - Non-comparative sorting.\n      - Counts occurrences of each element and uses this information to place elements.\n      - Efficient for small ranges of integers.\n\n## States\n\n  - **Counting Sort Worst, Average and Best**\n\n      - **Best Case:** $\\text{O(n ⁡+ k) - k}$ is the range of the input.\n      - **Average Case:** $\\text{O(n ⁡+ k)}$.\n      - **Worst Case:** $\\text{O(n ⁡+ k)}$.\n\n<br>\n\n:::\n\n<br>\n\n::: {.lead}\n##### Radix Sort\n:::\n\n<br>\n\n::: {.panel-tabset}\n\n## Usage\n\n  - **Use Case:** Effective for sorting large numbers or strings with a fixed length.\n\n## Descriptor\n\n  - **Distinct Characteristics:**\n\n      - Sorts numbers by processing individual digits.\n      - Non-comparative, stable, and efficient for specific data types.\n      - Often combined with counting sort.\n\n## States\n\n  - **Radix Sort Worst, Average and Best**\n\n      - **Best Case:** $\\text{O(n ⁡* k)}$ — k is the number of digits in the largest number.\n      - **Average Case:** $\\text{O(n ⁡* k)}$.\n      - **Worst Case:** $\\text{O(n ⁡* k)}$.\n\n## Tips\n\n  - **Radix Sort:** Look for code that sorts numbers based on their individual digits, starting from the **least significant digit (LSD)** or the most **significant digit (MSD)**. *(Count, Frequency, Sum)*\n\n<br>\n\n:::\n\n<br>\n\n::: {.lead}\n##### Bucket Sort\n:::\n\n<br>\n\n::: {.panel-tabset}\n\n## Usage\n\n  - **Use Case:** Good for uniformly distributed data.\n\n## Descriptor\n\n  - **Distinct Characteristics:**\n  \n      - Distributes elements into buckets and sorts each bucket individually.\n      - Efficient when the input is uniformly distributed.\n      - Often combined with another sorting algorithm like insertion sort.\n\n## States\n\n  - **Bucket Sort Worst, Average and Best**\n\n      - **Best Case:** $\\text{O(n + k)}$ — k is the number of buckets; assumes uniform distribution.\n      - **Average Case:** $\\text{O(n + k)}$.\n      - **Worst Case:** $O(n^2)$ — All elements end up in one bucket *(degenerate case)*.\n\n## Tips\n\n  - **Bucket:** Look for something that distributes the values into “buckets” where they are individually sorted. *(Bucket)*\n\n<br>\n\n:::\n\n<br>\n\n::: {.lead}\n##### Shell Sort\n:::\n\n<br>\n\n::: {.panel-tabset}\n\n## Descriptor\n\n  - **Distinct Characteristics:**\n\n      - Generalization of insertion sort with a gap sequence.\n      - Sorts elements far apart and gradually reduces the gap.\n      - Efficient for medium-sized datasets.\n      - Time Complexity: Depends on the gap sequence; commonly $\\text{O(n3/2)}$.\n\n## States\n\n  - **Shell Sort Worst, Average and Best**\n\n      - **Best Case:** $\\text{O(n log n)}$ — Occurs when the array is already sorted or nearly sorted, especially when using a good gap sequence like the Knuth sequence.\n      - **Average Case:** $O(n^(3/2))$ or $O(n^1.5)$ — Highly dependent on the gap sequence used. With commonly used sequences like the Knuth sequence, the average-case complexity is approximately $O(n^1.5)$.\n      - **Worst Case:** ${O(n^2)}$ — Can degrade to ${O(n^2)}$, particularly with poorly chosen gap sequences like the original Shell sequence *(where the gaps are halved each time)*\n\n## Tips\n\n  - **Shell Sort:** Look for code that sorts elements at specific intervals and gradually reduces the interval until it performs a final insertion sort. *(Gap, Interval)*\n\n<br>\n\n:::\n\n<br>\n\n---\n\n::: {.lead}\n###### **Summary**\n:::\n\n<br>\n\n::: {.callout-note title=\"Searching & Sorting Algorithms\" collapse=\"true\" appearance=\"simple\" icon=\"false\" style=\"border-left:none; border-right:none; border-top:none; border-bottom:none;\"}\n\n  - **Linear Search:** Simple, sequential; $O(n)$.\n  - **Binary Search:** Sorted data, divide and conquer; $\\text{O(log n)}$.\n  - **Bubble Sort:** Swaps, bubbles up; $O(n^2)$.\n  - **Selection Sort:** Finds minimum, swaps; $O(n^2)$.\n  - **Insertion Sort:** Builds sorted list, shifts; $O(n^2)$, $O(n)$ best case.\n  - **Merge Sort:** Divide and conquer, merge; $\\text{O(n log n)}$.\n  - **Quick Sort:** Pivot, partition; $\\text{O(n log n)}$ average, $O(n^2)$ worst case.\n  - **Heap Sort:** Max-heap, extract max; $\\text{O(n log n)}$.\n  - **Counting Sort:** Counts occurrences, non-comparative; $\\text{O(n + k)}$.\n  - **Radix Sort:** Sorts by digits, non-comparative; $O(nk)$.\n  - **Bucket Sort:** Distributes into buckets, sorts; $\\text{O(n + k)}$.\n  - **Shell Sort:** Gap sequence, insertion-like; $O(n^3/2)$.\n\n:::\n\n::: {.callout-note title=\"Key Observations\" collapse=\"true\" appearance=\"simple\" icon=\"false\" style=\"border-left:none; border-right:none; border-top:none; border-bottom:none;\"}\n\n  - **Bubble Sort, Selection Sort, and Insertion Sort:** These are simple but inefficient for large datasets, especially in the worst case.\n  - **Merge Sort and Heap Sort:** Stable and consistent in performance, regardless of the input.\n  - **Quick Sort:** Very efficient on average but can degrade to $O(n^2)$  in the worst case without proper pivot selection.\n  - **Counting Sort, Radix Sort, and Bucket Sort:** Efficient for specific types of data *(e.g., integers within a fixed range)* but less versatile.\n\n:::\n\n::: {.callout-note title=\"Choosing the Right Algorithm\" collapse=\"true\" appearance=\"simple\" icon=\"false\" style=\"border-left:none; border-right:none; border-top:none; border-bottom:none;\"}\n\n  - **Small datasets:** Simpler algorithms like bubble sort, selection sort, or insertion sort might suffice.\n  - **Large datasets:** More efficient algorithms like merge sort, quick sort, or heap sort are preferred.\n  - **Sorted data:** Algorithms like insertion sort can be very efficient.\n  - **Special conditions:** Use counting sort, radix sort, or bucket sort if the data is within a certain range or has other specific properties.\n\n<br>\n\n:::\n\n---\n\n<br>\n\n#### Big O Notation\n\n**What is Big O Notation?**\n\n  - **Big O Notation:** It provides an upper bound on the time or space complexity of an algorithm, representing the worst-case scenario. It’s a way to describe the efficiency of an algorithm as the input size grows towards infinity.\n\n**Why Use Big O Notation?**\n\n  - **Comparing Algorithms:** It allows us to compare the efficiency of different algorithms independently of hardware or other environmental factors.\n  - **Scalability:** It helps us understand how an algorithm will perform as the size of the input data grows.\n\n<br>\n\n::: {.lead}\n##### O Notations\n:::\n\n::: {.callout-note title=\"Common Big Os\" collapse=\"true\" appearance=\"simple\" icon=\"false\" style=\"border-left:none; border-right:none; border-top:none; border-bottom:none;\"}\n\n  1. **`O(1) - Constant Time`:**\n      - **Description:** The algorithm takes the same amount of time to execute regardless of the size of the input.\n      - **Example:** Accessing an element in an array by index.\n      - **Efficiency:** Excellent.\n\n  2. **`O(log n) - Logarithmic Time`:**\n      - **Description:** The runtime increases logarithmically as the input size increases. Typically occurs in algorithms that halve the problem size at each step, like binary search.\n      - **Example:** Binary search.\n      - **Efficiency:** Very good for large inputs.\n\n  3. **`O(n) - Linear Time`:**\n      - **Description:** The runtime increases linearly with the size of the input. If you double the input size, the runtime also doubles.\n      - **Example:** Linear search, iterating through a list.\n      - **Efficiency:** Reasonable for moderate to large inputs.\n\n  4. **`O(n log n) - Log-Linear Time`:**\n      - **Description:** The runtime increases more than linearly but less than quadratically. Common in efficient sorting algorithms like merge sort and quicksort.\n      - **Example:** Merge sort, quicksort, heap sort.\n      - **Efficiency:** Efficient for large inputs.\n\n  5. **`O(n^2) - Quadratic Time`:**\n      - **Description:** The runtime increases quadratically with the size of the input. If you double the input size, the runtime quadruples.\n      - **Example:** Bubble sort, insertion sort, selection sort *(for unsorted arrays)*.\n      - **Efficiency:** Poor for large inputs.\n\n  6. **`O(2n) - Exponential Time`:**\n      - **Description:** The runtime doubles with each additional element in the input. Common in algorithms that solve problems by brute force or explore all possible solutions.\n      - **Example:** Recursive algorithms for the Fibonacci sequence, certain dynamic programming problems.\n      - **Efficiency:** Very poor, impractical for large inputs.\n\n  7. **`O(n!) - Factorial Time`:**\n      - **Description:** The runtime increases factorially with the size of the input. Common in algorithms that generate all permutations of an input set.\n      - **Example:** Traveling salesman problem via brute force.\n      - **Efficiency:** Extremely poor, infeasible for even moderate input sizes.\n\n:::\n\n::: {.callout-note title=\"Time Complexity\" collapse=\"true\" appearance=\"simple\" icon=\"false\" style=\"border-left:none; border-right:none; border-top:none; border-bottom:none;\"}\n\n**Best Case, Worst Case, and Average Case**\n\n  - **Best Case:** The scenario where the algorithm performs the minimum possible number of operations. It’s often less relevant because it’s optimistic.\n      - **Example:** For linear search, the best case is $O(1)$, where the target element is the first one in the array.\n\n  - **Worst Case:** The scenario where the algorithm performs the maximum possible number of operations. Big O notation typically describes the worst-case complexity.\n      - **Example:** For linear search, the worst case is $O(n)$, where the target element is the last one in the array or isn’t present at all.\n\n  - **Average Case:** The scenario that represents the expected number of operations for a typical input. It’s more complex to calculate because it depends on the distribution of inputs.\n      - **Example:** For linear search, the average case is $O(n/2)$, but in Big O notation, we simplify this to $O(n)$.\n\n:::\n\n::: {.callout-note title=\"Calculation Rules\" collapse=\"true\" appearance=\"simple\" icon=\"false\" style=\"border-left:none; border-right:none; border-top:none; border-bottom:none;\"}\n\n**Ignore Constants:**\n\n  - **Rule:** In Big O notation, constant factors are ignored.\n  - **Why:** Big O notation focuses on the growth rate as the input size $(n)$ increases, so a constant multiplier doesn't affect the growth rate.\n  - **Example:** $O(2n)$ simplifies to $O(n)$\n\n**Focus on the Dominant Term:**\n\n  - **Rule:** Only the term with the highest growth rate is considered.\n  - **Why:** As n becomes large, the term with the highest growth rate will dominate the others.\n  - **Example:** $O(n2+n)$ simplifies to $O(n2)$\n\n**Drop Lower Order Terms:**\n\n  - **Rule:** Lower-order terms are ignored because they become insignificant as n grows.\n  - **Why:** Similar to focusing on the dominant term, lower-order terms have a negligible impact on large inputs.\n  - **Example:** $O(n2 + n + log n)$  simplifies to $O(n2)$\n\n**Multiplicative Constants Can Be Ignored:**\n  - **Rule:** Coefficients that multiply variables *(e.g., 2n, 3n^2)* are ignored.\n  - **Why:** Like constants, they don't change the growth rate.\n  - **Example:** $O(3n2)$ simplifies to $O(n2)$\n\n**Additive Constants Can Be Ignored:**\n\n  - **Rule:** Constant terms that don't depend on n are ignored.\n  - **Why:** They don't affect the overall growth rate as n increases.\n  - **Example:** $O(n+10)$ simplifies to $O(n)$\n\n**Logarithms with Different Bases:**\n\n  - **Rule:** Logarithms with different bases can be considered equivalent in Big O notation.\n  - **Why:** Changing the base of a logarithm only introduces a constant factor, which is ignored in Big O notation.\n  - **Example:** $\\text{O(log⁡2 n)}$ simplifies to $\\text{O(log⁡ n)}$\n\n**Non-Dominant Polynomial Terms:**\n\n  - **Rule:** In polynomials, only the highest degree term is considered.\n  - **Why:** As n grows large, the highest degree term will dominate.\n  - **Example:** $\\text{O(5n3 + 2n2 + 7)}$ simplifies to $O(n3)$\n\n**Exponential Growth:**\n\n  - **Rule:** Exponential growth functions dominate polynomial functions.\n  - **Why:** Exponential functions grow much faster than polynomial functions as n increases.\n  - **Example:** $\\text{O(2n + n3)}$ simplifies to $O(2n)$\n\n**Nested Loops:**\n\n  - **Rule:** The time complexity of nested loops is the product of the complexities of each loop.\n  - **Why:** Each loop iterates based on the input size, so their combined effect is multiplicative.\n  - **Example:** A loop inside another loop both running n times results in $\\text{O(n * n) = O(n2)}$\n\n**Sequential Statements:**\n\n  - **Rule:** If two independent statements *(or loops)* are executed sequentially, their time complexities are added.\n  - **Why:** Sequential operations don't multiply time complexity, but rather add up.\n  - **Example:** Two loops each running n times sequentially result in $\\text{O(n + n) = O(n)}$\n\n<br>\n\n:::\n\n<br>\n\n## Determines Data Structure Impact - (31%)\n\n#### Implementation of Data Structures\n\n<br>\n\n::: {.lead}\n##### Data Types\n:::\n\n<br>\n\n::: {.panel-tabset}\n\n## Definition\n\n**What is a Data Type?**\n\n**Definition:** A data type is a classification that specifies the type of data \nthat a variable can hold in programming. It defines the operations that can be \nperformed on the data and the way the data is stored in memory.\n\n## Examples\n\n  - **Primitive Data Types:** These are the basic building blocks of data in a programming language.\n  \n      - Integer *(e.g., `int` in C, Java)*: Holds whole numbers.\n      - Floating Point *(e.g., `float`, `double`)*: Holds numbers with fractional parts.\n      - Character *(e.g., `char`)*: Holds a single character.\n      - Boolean *(e.g., `bool`)*: Holds a `true` or `false` value.\n      \n  - **Composite Data Types:** These are constructed from primitive types.\n  \n      - Arrays: A collection of elements of the same data type.\n      - Structures *(e.g., `struct` in C)*: A collection of different data types.\n      \n  - **User-Defined Data Types:** Created by the user, typically by combining primitive data types.\n  \n      - Enumerations `(enum)`, Classes, etc.\n\n## Extra\n\n**Enumeration:**\n\n  - Enumeration, often referred to as *\"enum,\"* is a data type in programming that allows a variable to be a set of predefined constants. \n  - These constants are typically related and represent a set of possible values that a variable of the enumeration type can hold. \n  - Enums improve code readability, make it easier to manage sets of related values, and reduce errors by limiting the values a variable can take.\n\n**Key Concepts of Enumeration:**\n\n  1. **Definition:** An enumeration is defined using the enum keyword *(syntax can vary by language)*. It consists of a set of named constants, each representing a unique value.\n  2. **Values:** The values in an enum are usually integers by default, starting from 0, but they can be assigned specific values as needed.\n  3. **Usage:** Enums are commonly used when a variable can only take one out of a small set of possible values, like days of the week, directions, states, etc.\n\n**Example in Different Languages:**\n\nC/C++\n\n\n::: {.cell}\n\n```{.c .cell-code}\nenum Direction {\n    NORTH,\n    EAST,\n    SOUTH,\n    WEST\n};\n\nDirection dir = NORTH;\n```\n:::\n\n\nJava\n\n\n::: {.cell}\n\n```{.js .cell-code}\npublic enum Direction {\n    NORTH,\n    EAST,\n    SOUTH,\n    WEST\n}\n\nDirection dir = Direction.NORTH;\n```\n:::\n\n\nPython (using enum module)\n\n\n::: {.cell}\n\n```{.python .cell-code}\nfrom enum import Enum\n\nclass Direction(Enum):\n    NORTH = 1\n    EAST = 2\n    SOUTH = 3\n    WEST = 4\n\ndir = Direction.NORTH\n```\n:::\n\n\n**Advantages of Using Enums:**\n  - Readability: Code is easier to read and understand.\n  - Maintainability: Easier to update and maintain related values.\n  - Type Safety: Prevents assigning invalid values to variables of the enum type.\n\nEnums are useful in scenarios where a variable should only be allowed to take one out of a small set of specific values, helping prevent errors and making the code clearer and more reliable.\n\n**Key Characteristics:**\n  - **Memory Allocation:** Data types determine how much memory is allocated for storing the data.\n  - **Operations:** Each data type supports a set of operations, like arithmetic operations for integers or concatenation for strings.\n\n<br>\n\n:::\n\n<br>\n\n::: {.lead}\n##### Data Structures\n:::\n\n<br>\n\n::: {.panel-tabset}\n\n## Definition\n\n**What is a Data Structure?**\n\n  - **Definition:** A data structure is a specific way of organizing and storing data in a computer so that it can be accessed and modified efficiently. Data structures use data types as their underlying foundation.\n\n## Examples\n\n  - **Arrays:** A collection of elements stored in contiguous memory locations.\n  - **Linked Lists:** A series of connected nodes, where each node contains data and a reference to the next node.\n  - **Stacks:** A collection of elements with Last-In-First-Out (LIFO) access.\n  - **Queues:** A collection of elements with First-In-First-Out (FIFO) access.\n  - **Trees:** A hierarchical structure with a root element and sub-elements called nodes.\n  - **Graphs:** A collection of nodes *(vertices)* connected by edges.\n  - **Hash Tables:** A data structure that maps keys to values for efficient lookup.\n\n<br>\n\n:::\n\n<br>\n\n::: {.lead}\n##### Abstract Data Types (ADTs)\n:::\n\n<br>\n\n::: {.panel-tabset}\n\n## Definition\n\n  - **Definition:** An abstract data type (ADT) is a theoretical model of a data structure that defines the behavior from the user's point of view, without specifying the underlying implementation. It specifies the operations that can be performed and the expected behavior but not how these operations are carried out.\n\n## Examples\n\n  - **List ADT:** Operations include insertion, deletion, and access by index.\n  - **Stack ADT:** Operations include `push`, `pop`, and `peek`.\n  - **Queue ADT:** Operations include `enqueue` and `dequeue`.\n  - **Map (or Dictionary) ADT:** Operations include inserting, deleting, and searching for key-value pairs.\n\n<br>\n\n:::\n\n<br>\n\n::: {.lead}\n##### Differences\n:::\n\n<br>\n\n::: {.panel-tabset}\n\n## 1. Abstraction\n\n  - **Data Types:** The most basic level; concerned with how data is stored and what operations are allowed.\n  - **Data Structures:** A step higher in abstraction; concerned with how data is organized and accessed.\n  - **ADTs:** The highest level of abstraction; concerned with the operations and behavior of a data structure, abstracted away from the implementation details.\n\n## 2. Purpose\n\n  - **Data Types:** Define the type and nature of the data.\n  - **Data Structures:** Provide a way to organize and manage data efficiently.\n  - **ADTs:** Define a blueprint for data structures, focusing on what operations can be performed and what their expected behavior is.\n\n## 3. Implementation\n\n  - **Data Types:** Directly supported by the programming language.\n  - **Data Structures:** Built using data types and can be complex.\n  - **ADTs:** Can be implemented using various data structures; the choice of implementation depends on the specific needs like performance and memory usage.\n\n## 4. Examples\n\n  - **Data Types:** int, float, char, bool\n  - **Data Structures:** Arrays, linked lists, trees, hash tables\n  - **ADTs:** Stack, queue, list, set, map\n\n<br>\n\n:::\n\n<br>\n\n::: {.lead}\n###### Array\n:::\n\n<br>\n\n::: {.panel-tabset}\n\n## 1. Description\n\n  - An **array** is a collection of homogeneous elements stored in contiguous memory locations. Each element in the array can be accessed using its index.\n  - **Python Equivalent:** `list`\n\n## 2. Operations\n\n  - **Access:** $O(1)$ — Direct access to elements via index. \n  - **Search:**\n  \n      - **Linear Search:** $O(n)$\n      - **Binary Search:** $\\text{O(log⁡ n)}$ *(only if the array is sorted)*\n      \n  - Insertion:\n  \n      - **At the End:** Append the element to the end of the array. If the array is full *(fixed size)*, you may need to resize it.\n        - **Time Complexity:** $O(1)$ *(amortized if resizing is needed)*.\n      - **At a Specific Index:** Shift elements to the right from the index to create space, then insert the new element.\n        - **Time Complexity:** $O(n)$, where n is the number of elements after the insertion point.\n        \n  - Deletion:\n  \n      - **From the End:** Remove the last element.\n        - **Time Complexity:** $O(1)$.\n      - **From a Specific Index:** Shift elements to the left to fill the gap left by the removed element.\n        - **Time Complexity:** $O(n)$, where n is the number of elements after the removal point.\n\n## 3. Usage\n\n  - **Use Cases:**\n  \n    - Suitable for scenarios where fast access to elements is required, and the size of the data set is known.\n\n<br>\n\n:::\n\n<br>\n\n::: {.lead}\n###### Linked List\n:::\n\n<br>\n\n::: {.panel-tabset}\n\n## Description\n\n  - A linked list is a linear collection of elements called nodes, where each node contains data and a reference *(or pointer)* to the next node in the sequence.\n  - Python Equivalent: Custom class with Node and LinkedList classes\n\n## Types\n\n  - Singly Linked List: Each node points to the next node.\n  - Doubly Linked List: Each node points to both the next and previous nodes.\n  - Circular Linked List: The last node points back to the first node, forming a loop.\n\n## Operations\n\n  - **Access:** $O(n)$ — Requires traversal from the head to the desired node.\n  - **Search:** $O(n)$ — Requires traversal to find the target element.\n  \n  - **Insertion:**\n  \n      - **At the Beginning (Singly/ Doubly Linked List):** Create a new node and adjust the head *(and possibly tail in a doubly linked list)*.\n        - **Time Complexity:** $O(1)$.\n      - **At the End (Singly Linked List):** Traverse to the last node, then insert the new node.\n        - **Time Complexity:** $O(n)$.\n      - **At a Specific Position:** Traverse to the position and insert the node, adjusting the pointers.\n        - **Time Complexity:** $O(n)$.\n        \n  - **Deletion:**\n  \n      - **From the Beginning:** Adjust the head pointer to the next node.\n        - **Time Complexity:** $O(1)$.\n      - **From the End:** Traverse to the second last node, adjust its pointer to null.\n        - **Time Complexity:** $O(n)$.\n      - **From a Specific Position:** Traverse to the node before the one to remove, then adjust pointers to bypass the removed node.\n        - **Time Complexity:** $O(n)$.\n\n## Usage\n\n  - **Use Cases:**\n  \n    - Useful when the size of the data set is unknown or when frequent insertions and deletions are required.\n\n<br>\n\n:::\n\n<br>\n\n::: {.lead}\n###### Methods for Lists/Arrays\n:::\n\n<br>\n\n::: {.panel-tabset}\n\n## I ...\n\n  - **append()**\n    - **Description:** Adds an element to the end of the list.\n    - **Syntax:** list.append(element)\n  \n**Example:**\n\n\n::: {.cell}\n\n```{.python .cell-code}\nfruits = [\"apple\", \"banana\"]\nfruits.append(\"orange\")\nprint(fruits)  # Output: ['apple', 'banana', 'orange']\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n['apple', 'banana', 'orange']\n```\n\n\n:::\n:::\n\n\n  - **extend()**\n    - **Description:** Extends the list by appending elements from another iterable *(e.g., another list)*.\n    - **Syntax:** list.extend(iterable)\n\n**Example:**\n\n\n::: {.cell}\n\n```{.python .cell-code}\nnumbers = [1, 2, 3]\nnumbers.extend([4, 5])\nprint(numbers)  # Output: [1, 2, 3, 4, 5]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1, 2, 3, 4, 5]\n```\n\n\n:::\n:::\n\n\n<br>\n\n## II ...\n\n  **insert()**\n    - **Description:** Inserts an element at a specific index in the list.\n    - **Syntax:** list.insert(index, element)\n\n**Example:**\n\n\n::: {.cell}\n\n```{.python .cell-code}\nfruits = [\"apple\", \"banana\"]\nfruits.insert(1, \"orange\")\nprint(fruits)  # Output: ['apple', 'orange', 'banana']\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n['apple', 'orange', 'banana']\n```\n\n\n:::\n:::\n\n\n  - **remove()**\n    - **Description:** Removes the first occurrence of a specified value from the list.\n    - **Syntax:** list.remove(element)\n\n**Example:**\n\n\n::: {.cell}\n\n```{.python .cell-code}\nfruits = [\"apple\", \"banana\", \"orange\"]\nfruits.remove(\"banana\")\nprint(fruits)  # Output: ['apple', 'orange']\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n['apple', 'orange']\n```\n\n\n:::\n:::\n\n\n<br>\n\n## III ...\n\n  - **pop()**\n    - **Description:** Removes and returns the element at the specified index. If no index is specified, it removes and returns the last element.\n    - **Syntax:** list.pop(index)\n\n**Example:**\n\n\n::: {.cell}\n\n```{.python .cell-code}\nfruits = [\"apple\", \"banana\", \"orange\"]\nlast_fruit = fruits.pop()\nprint(last_fruit)  # Output: 'orange'\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\norange\n```\n\n\n:::\n\n```{.python .cell-code}\nprint(fruits)      # Output: ['apple', 'banana']\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n['apple', 'banana']\n```\n\n\n:::\n:::\n\n\n  - **index()**\n    - **Description:** Returns the index of the first occurrence of a specified value.\n    - **Syntax:** list.index(element, start, end)\n\n**Example:**\n\n\n::: {.cell}\n\n```{.python .cell-code}\nfruits = [\"apple\", \"banana\", \"orange\"]\nindex_of_banana = fruits.index(\"banana\")\nprint(index_of_banana)  # Output: 1\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n1\n```\n\n\n:::\n:::\n\n\n<br>\n\n## IV ...\n\n  - **count()**\n    - **Description:** Returns the number of occurrences of a specified value in the list.\n    - **Syntax:** list.count(element)\n\n**Example:**\n\n\n::: {.cell}\n\n```{.python .cell-code}\nfruits = [\"apple\", \"banana\", \"orange\", \"banana\"]\ncount_of_banana = fruits.count(\"banana\")\nprint(count_of_banana)  # Output: 2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n2\n```\n\n\n:::\n:::\n\n\n  - **sort()**\n    - **Description:** Sorts the elements of the list in ascending order *(or descending order if specified)* in place.\n    - **Syntax:** list.sort(reverse=False)\n\n**Example:**\n\n\n::: {.cell}\n\n```{.python .cell-code}\nnumbers = [3, 1, 4, 1, 5, 9]\nnumbers.sort()\nprint(numbers)  # Output: [1, 1, 3, 4, 5, 9]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1, 1, 3, 4, 5, 9]\n```\n\n\n:::\n:::\n\n\n<br>\n\n## V ...\n\n  - **reverse()**\n    - **Description:** Reverses the elements of the list in place.\n    - **Syntax:** list.reverse()\n\n**Example:**\n\n\n::: {.cell}\n\n```{.python .cell-code}\nnumbers = [1, 2, 3, 4]\nnumbers.reverse()\nprint(numbers)  # Output: [4, 3, 2, 1]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[4, 3, 2, 1]\n```\n\n\n:::\n:::\n\n\n  - **copy()**\n    - **Description:** Returns a shallow copy of the list.\n    - **Syntax:** list.copy()\n\n**Example:**\n\n\n::: {.cell}\n\n```{.python .cell-code}\nfruits = [\"apple\", \"banana\", \"orange\"]\nfruits_copy = fruits.copy()\nprint(fruits_copy)  # Output: ['apple', 'banana', 'orange']\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n['apple', 'banana', 'orange']\n```\n\n\n:::\n:::\n\n\n<br>\n\n**Java ArrayList Methods**\n\n  - `**add():**` Adds an element to the end of the list.\n  - `**remove():**` Removes the first occurrence of a specified element.\n  - `**get():**` Retrieves the element at a specified index.\n  - `**set():**` Replaces the element at a specified index with a new element.\n  - `**size():**` Returns the number of elements in the list.\n\n<br>\n\n:::\n\n<br>\n\n---\n\n##### Record\n\n  - A **Record** is a composite data structure used to store a collection of related fields, each with a specific name and data type. \n  - It is commonly used to model entities in databases and programming, allowing for structured and organized data storage. \n  - Records are versatile and can represent complex objects with multiple attributes, making them essential in many applications.\n  - In Python, a **Record** is typically implemented as a **class**, a `namedtuple`, or a `dataclass`. Each of these provides a way to group multiple fields *(attributes)* together under one name, similar to how a record in other languages might work.\n\n---\n\n<br>\n\n::: {.lead}\n###### Stack\n:::\n\n<br>\n\n::: {.panel-tabset}\n\n#### Description\n\n  - A **stack** is a linear data structure that follows the Last-In-First-Out (LIFO) principle, meaning the last element added is the first one to be removed.\n  - **Python Equivalent:** `list` or `collections.deque`\n\n#### Operations\n\n  - **Push (Insertion):** $O(1)$ — Add an element to the top of the stack.\n  - **Pop (Deletion):** $O(1)$ — Remove the top element from the stack.\n  - **Peek/Top:** $O(1)$ — View the top element without removing it.\n  - **IsEmpty:** $O(1)$ — Check if the stack is empty.\n\n#### Usage\n\n  - **Use Cases:**\n  \n    - Used in expression evaluation, backtracking algorithms, undo mechanisms in applications, and for maintaining function call stacks in recursion.\n\n<br>\n\n:::\n\n<br>\n\n::: {.lead}\n###### Bag\n:::\n\n<br>\n\n::: {.panel-tabset}\n\n#### Description\n\n  - A **Bag** *(also known as a multiset)* is a simple data structure that allows for storing a collection of elements where duplicate elements are allowed. Unlike a set, which requires all elements to be unique, a bag can contain multiple occurrences of the same element.\n  - **Python Equivalent:** `collections.Counter`\n\n#### Operations\n\n  - **Add (**`add`**)** — Adds an element to the bag.\n    - Simply add the element, usually at the end or beginning, depending on the implementation *(array, linked list, etc.)*.\n      - **Time Complexity:** $O(1)$.\n  - **Check Membership (**`contains`**)** — Checks if an element is in the bag.\n  - **Count Occurrences (**`count`**)** — Counts how many times an element appears in the bag.\n  - **Remove (**`remove`**)** — Removes one occurrence of an element from the bag.\n    - Typically, bags do not have a direct remove operation unless implemented, in which case:\n      - Remove Specific Element: Find the element and remove it, adjusting structure accordingly.\n        - Time Complexity: $O(n)$.\n  - **Get Size (**`size`**)** — Returns the total number of elements in the bag, including duplicates.\n\n#### Usage\n\n  - **Use Cases:**\n  \n    - A bag is useful when you need to count the number of occurrences of items, such as counting words in a document.\n\n<br>\n\n:::\n\n<br>\n\n::: {.lead}\n###### Queue\n:::\n\n<br>\n\n::: {.panel-tabset}\n\n#### Description\n\n  - A **queue** is a linear data structure that follows the First-In-First-Out (FIFO) principle, meaning the first element added is the first one to be removed.\n  - **Python Equivalent:** `collections.deque` or `queue.Queue`\n\n#### Operations\n\n  - **Enqueue (Insertion/Push):** $O(1)$ — Add an element to the end of the queue.\n  - **Dequeue (Deletion/Pop):** $O(1)$ — Remove the front element from the queue.\n  - **Front/Peek:** $O(1)$ — View the front element without removing it.\n  - **IsEmpty:** $O(1)$ — Check if the queue is empty.\n\n#### Usage\n\n  - **Use Cases:**\n  \n    - Useful in scheduling processes, managing tasks in order, breadth-first search (BFS) algorithms, and handling requests in servers.\n\n<br>\n\n:::\n\n<br>\n\n::: {.lead}\n###### Deque\n:::\n\n<br>\n\n::: {.panel-tabset}\n\n#### Description\n\n  - A **deque** is a linear data structure that allows insertion and deletion of elements from both the front and rear ends.\n  - **Python Equivalent:** `collections.deque`\n\n#### Operations\n\n  - **InsertFront:** $O(1)$ — Add an element to the front.\n  - **InsertLast:** $O(1)$ — Add an element to the end.\n  - **DeleteFront:** $O(1)$ — Remove an element from the front.\n  - **DeleteLast:** $O(1)$ — Remove an element from the end.\n  - **PeekFront:** $O(1)$ — View the front element.\n  - **PeekLast:** $O(1)$ — View the last element.\n  - **IsEmpty:** $O(1)$ — Check if the deque is empty.\n\n#### Usage\n\n  - **Use Cases:**\n  \n    - Useful in scenarios requiring access from both ends, such as the implementation of both stacks and queues, task scheduling, and sliding window algorithms.\n\n<br>\n\n:::\n\n<br>\n\n::: {.callout-note title=\"Hash Table\" collapse=\"true\" appearance=\"simple\" icon=\"false\" style=\"border-left:none; border-right:none; border-top:none; border-bottom:none;\"}\n\n###### Descriptions\n\n  - A hash table is a data structure that maps keys to values using a hash function, which transforms the key into an index in an array.\n  - **Python Equivalent:** `dict`\n\n<br>\n\n###### Operations\n\n  - **Insert:** $O(1)$ — Map a key to a value by computing its hash.\n  - **Search:** $O(1)$ — Retrieve the value associated with a given key.\n  - **Delete:** $O(1)$ — Remove the key-value pair from the table.\n\n<br>\n\n###### Usage\n\n  - **Use Cases:**\n  \n    - Highly efficient for scenarios requiring fast lookups, such as databases, caches, and dictionaries.\n\n<br>\n\n###### Collisions\n\n  - **Handling Collisions:**\n  \n    - **Chaining:** Store multiple elements at the same index using a linked list.\n    - **Open Addressing (Probing):** Find another open slot using techniques like linear probing, quadratic probing, or double hashing.\n\n<br>\n\n###### Hashing\n\n  - **Hashing**\n  \n    - **Hashing** is the process of mapping keys to indices in an array using a hash function. It ensures efficient data retrieval by minimizing the number of comparisons required.\n\n  **Hash Function**\n    - A **hash function** is a function that converts input *(key)* into a fixed-size value, typically an integer, which serves as an index in the hash table array.\n     - A good hash function has the following properties:\n     \n      - **Deterministic:** The same key always produces the same hash value.\n      - **Uniform Distribution:** The hash values should be distributed uniformly across the array to minimize collisions.\n      - **Fast Computation:** The function should be quick to compute.\n\n  - **Hash Keys**\n  \n    - **Hash Key:** The key for which the hash function generates an index.\n    - **Hash Value:** The integer index produced by the hash function.\n\n<br>\n\n\n###### **How to perform hash function on calculator**\n\nTo determine where the data associated with the last 4 digits of the Social Security number *('2023')* will be stored in the array, follow these steps:\n\n  **1.** Understand the Hash Function: The problem specifies a hash function given by key % 1009. Here, % denotes the modulus operation. This operation returns the remainder of the division of key by 1009.\n\n  **2.** Determine the Key: The last 4 digits of the Social Security number are '2023'. Therefore, the key you're interested in is 2023.\n\n  **3.** Apply the Hash Function: Use the hash function to find the index in the array where the data should be stored. Specifically, you need to compute:\n\n    a. Key / Hash - (whole number in result) * Hash\n      i. For this example\n        1. $(2023 / 1009) = 2.004955401$\n        2. $2.004955401 - 2 = 0.004955401$\n        3. $0.004955401 * 1009 = 5$\n\n  **4.** By calculating the remainder, you will find the index in the array soc where the data associated with the key '2023' will be stored.\n\n    a. soc[5]\n\n<br>\n\n:::\n\n<br>\n\n::: {.lead}\n##### Trees\n:::\n\n<br>\n\n::: {.callout-note title=\"Tree\" collapse=\"true\" appearance=\"simple\" icon=\"false\" style=\"border-left:none; border-right:none; border-top:none; border-bottom:none;\"}\n\n<br>\n\n###### Description\n\n  - A **tree** is a hierarchical data structure composed of nodes, where each node contains a value and references to child nodes. The top node is called the root, and nodes with no children are called leaves.\n  - **Python Equivalent:** Custom class with `Node` and `Tree` classes\n\n<br>\n\n###### Types\n\n  - **Binary Tree:** Each node has at most two children *(left and right)*.\n  - **Binary Search Tree (BST):** A binary tree where the left child contains values less than the parent, and the right child contains values greater than the parent.\n  - **AVL Tree:** A self-balancing binary search tree.\n  - **Red-Black Tree:** Another type of self-balancing binary search tree.\n  - **B-Tree:** A self-balancing tree that maintains sorted data and allows searches, sequential access, insertions, and deletions in logarithmic time.\n\n<br>\n\n###### Forms\n\n  - **Full Binary Tree**  — Definition: A binary tree in which every node has either 0 or 2 children.\n  - **Complete Binary Tree** — Definition: A binary tree in which all levels are completely filled except possibly the last level, which is filled from left to right.\n  - **Perfect Binary Tree** — Definition: A binary tree in which all interior nodes have two children and all leaves are at the same level.\n  - **Balanced Binary Tree** — Definition: A binary tree where the height of the left and right subtrees of any node differ by at most one.\n\n<br>\n\n###### Operations\n\n  - **Insertion:** $\\text{O(log ⁡n)}$ for balanced trees like AVL or Red-Black Trees; $O(n)$ for unbalanced trees.\n\n  - **Deletion:** $\\text{O(log ⁡n)}$ for balanced trees; $O(n)$ for unbalanced trees.\n    - **BST:** Find the node to be removed, then:\n        - **No Children:** Just remove the node.\n        - **One Child:** Bypass the node and link its parent directly to its child.\n        - **Two Children:** Find the in-order predecessor *(or successor)*, swap values, and remove the predecessor *(or successor)* node.\n        - **Time Complexity:** $\\text{O(log n)}$ on average, $O(n)$ in the worst case.\n\n  - **Search:** $\\text{O(log ⁡n)}$  for balanced trees; $O(n)$ for unbalanced trees.\n\n  - **Traversal:**\n\n    - **In-order:** $O(n)$ — Left, Root, Right *(used in BSTs to get sorted order)*.\n    - **Pre-order:** $O(n)$ — Root, Left, Right.\n    - **Post-order:** $O(n)$ — Left, Right, Root.\n    - **Level-order:** $O(n)$— Traverse nodes level by level.\n\n<br>\n\n###### Usage\n\n  - **Use Cases:**\n  \n    - Suitable for hierarchical data *(like file systems)*, database indexing, and scenarios requiring sorted data with dynamic insertion and deletion.\n\n<br>\n\n:::\n\n<br>\n\n::: {.lead}\n###### Adelson-Velsky and Landis Trees\n:::\n\n<br>\n\n::: {.callout-note title=\"AVL Trees\" collapse=\"true\" appearance=\"simple\" icon=\"false\" style=\"border-left:none; border-right:none; border-top:none; border-bottom:none;\"}\n\n<br>\n\n###### Properties\n\n  - An AVL tree is a binary search tree in which the height of the two child subtrees of any node differs by at most one.\n  - If at any time during insertion or deletion this condition is violated, the tree is rebalanced through rotations.\n\n<br>\n\n###### Balancing\n\n  - **Single Rotation:** Used when a node is inserted into the left subtree of the **left child** or the `right subtree` of the **right child**.\n  - **Double Rotation:** Used when a node is inserted into the left subtree of the right child or the `right subtree` of the **left child**.\n\n<br>\n\n###### Time\n\n  - **Time Complexity:**\n  \n    - **Search**, **Insertion**, **Deletion:** $\\text{O(log n)}$, where n is the number of nodes.\n\n<br>\n\n###### Usage\n\n  - **Use Cases:**\n  \n    - AVL trees are well-suited for applications where frequent insertions and deletions occur, and maintaining strict balance is important.\n\n<br>\n\n:::\n\n<br>\n\n::: {.lead}\n###### Red-Black\n:::\n\n<br>\n\n::: {.callout-note title=\"Red-Black Trees\" collapse=\"true\" appearance=\"simple\" icon=\"false\" style=\"border-left:none; border-right:none; border-top:none; border-bottom:none;\"}\n\n<br>\n\n###### Properties\n\n  - A Red-Black tree is a binary search tree with an extra bit of storage per node: its color, which can be either red or black.\n  - The tree satisfies several properties:\n  \n      1. Every node is either red or black.\n      2. The root is always black.\n      3. All leaves (NIL nodes) are black.\n      4. Red nodes cannot have red children *(no two red nodes can be adjacent)*.\n      5. Every path from a node to its descendant NIL nodes must have the same number of black nodes *(black height)*.\n\n<br>\n\n###### Balancing\n\n  - The tree is kept balanced by performing rotations and color changes during insertions and deletions.\n\n<br>\n\n###### Time\n\n  - **Time Complexity:**\n  \n    - **Search**, **Insertion**, **Deletion:** $\\text{O(log n)}$.\n\n<br>\n\n###### Usage\n\n  - **Use Cases:**\n  \n    - Red-Black trees are used in many systems, such as the Linux kernel's process scheduling and in standard libraries like C++'s **std::map** and **std::set**, due to their relatively simple implementation and good performance.\n\n<br>\n\n:::\n\n<br>\n\n::: {.lead}\n###### Balanced Tree\n:::\n\n<br>\n\n::: {.callout-note title=\"B-Trees\" collapse=\"true\" appearance=\"simple\" icon=\"false\" style=\"border-left:none; border-right:none; border-top:none; border-bottom:none;\"}\n\n<br>\n\n###### Properties\n\n  - A B-tree is a self-balancing search tree in which nodes can have more than two children. It's commonly used in databases and file systems.\n  - A B-tree of order `m` can have at most `m-1` keys and `m` children.\n  - All leaf nodes are at the same depth, and internal nodes act as a guide to direct searches.\n\n<br>\n\n###### Balancing\n\n  - Balancing in B-trees is achieved through splitting and merging nodes.\n  - When a node in a B-tree becomes too full *(i.e., has more than m-1 keys)*, it is split into two nodes, and the middle key is pushed up to the parent node.\n  - When a node has too few keys, it may borrow keys from its neighbors or merge with a neighboring node.\n\n<br>\n\n###### Time\n\n  - **Time Complexity:**\n  \n    - **Search**, **Insertion**, **Deletion:** $\\text{O(log n)}$.\n\n<br>\n\n###### Usage\n\n  - **Use Cases:**\n  \n    - B-trees are particularly effective for systems that read and write large blocks of data, such as databases and file systems, where minimizing disk I/O operations is critical.\n\n<br>\n\n:::\n\n<br>\n\n---\n\n::: {.lead}\n###### **Wrap-up**\n:::\n\n<br>\n\n::: {.callout-note title=\"Comparison Summary\" collapse=\"true\" appearance=\"simple\" icon=\"false\" style=\"border-left:none; border-right:none; border-top:none; border-bottom:none;\"}\n\n  - **AVL Trees:** Strictly balanced, more rotations, better for search-heavy applications.\n  - **Red-Black Trees:** Looser balancing, fewer rotations, generally faster insertions and deletions.\n  - **B-Trees:** Optimized for storage systems, used in databases, and file systems for handling large volumes of data.\n\n:::\n\n::: {.callout-note title=\"Tree Traversal\" collapse=\"true\" appearance=\"simple\" icon=\"false\" style=\"border-left:none; border-right:none; border-top:none; border-bottom:none;\"}\n\n  - *Pre-Order Traversal (NLR)* - Node, Left, Right\n  - *In-Order Traversal (LNR)* - Left, Node, Right\n  - *Post-Order Traversal (LRN)* - Left, Right, Node\n\n:::\n\n<br>\n\n---\n\n<br>\n\n::: {.lead}\n###### Pre-Order Traversal (NLR)\n:::\n\n<br>\n\n::: {.panel-tabset}\n\n## Order:\n\n::: {.text-center}\n**N**ode → **L**eft → **R**ight\n:::\n\n## Process:\n\n  - Visit the **Node** first.\n  - Then recursively visit the **Left** subtree.\n  - Finally, visit the **Right** subtree.\n\n## Examples:\n\nIf you have a tree like this:\n\n\n::: {.cell}\n\n```{.text .cell-code}\n    A\n   / \\\n  B   C\n / \\\nD   E\n```\n:::\n\n\n  - The Pre-Order traversal would be: **A B D E C**\n\n:::\n\n<br>\n\n::: {.lead}\n###### In-Order Traversal (LNR)\n:::\n\n<br>\n\n::: {.panel-tabset}\n\n## Order:\n\n::: {.text-center}\n**L**eft → **N**ode → **R**ight\n:::\n\n## Process:\n\n  - Recursively visit the **Left** subtree.\n  - Then visit the **Node**.\n  - Finally, visit the **Right** subtree.\n\n## Example:\n\nFor the same tree:\n\n\n::: {.cell}\n\n```{.text .cell-code}\n    A\n   / \\\n  B   C\n / \\\nD   E\n```\n:::\n\n\n  - The In-Order traversal would be: **D B E A C**\n\n:::\n\n<br>\n\n::: {.lead}\n###### Post-Order Traversal (LRN)\n:::\n\n<br>\n\n::: {.panel-tabset}\n\n## Order:\n\n::: {.text-center}\n**L**eft → **R**ight → **N**ode\n:::\n\n## Process:\n\n  - Recursively visit the **Left** subtree.\n  - Then visit the **Right** subtree.\n  - Finally, visit the **Node**.\n\n## Examples:\n\nFor the same tree:\n\n\n::: {.cell}\n\n```{.text .cell-code}\n    A\n   / \\\n  B   C\n / \\\nD   E\n```\n:::\n\n\n  - The Post-Order traversal would be: **D E B C A**\n\n:::\n\n<br>\n\n---\n\n::: {.lead}\n###### **Wrap-up**\n:::\n\n<br>\n\n::: {.callout-note title=\"How to Remember Them:\" collapse=\"true\" appearance=\"simple\" icon=\"false\" style=\"border-left:none; border-right:none; border-top:none; border-bottom:none;\"}\n\n  - **Pre-Order (NLR):** Think of \"Pre\" as \"before\" - you process the Node before anything else.\n  - **In-Order (LNR):** \"In\" implies \"in between\" - the Node is processed in between the Left and Right subtrees.\n  - **Post-Order (LRN):** \"Post\" means \"after\" - the Node is processed after the subtrees.\n\n:::\n\n::: {.callout-note title=\"Visual Mnemonic:\" collapse=\"true\" appearance=\"simple\" icon=\"false\" style=\"border-left:none; border-right:none; border-top:none; border-bottom:none;\"}\n\n  - **Pre-Order:** Imagine starting at the root and touching it first.\n  - **In-Order:** Imagine walking along the edge of the tree, touching the left side first, then the root, and then the right side.\n  - **Post-Order:** Imagine leaving the tree by processing the children before the root.\n\n:::\n\n<br>\n\n---\n\n<br>\n\n::: {.lead}\n##### Heap\n:::\n\n<br>\n\n::: {.panel-tabset}\n\n## Description:\n\n  - A **heap** is a specialized tree-based data structure that satisfies the heap property. In a **max-heap**, the parent node is always greater than or equal to its children; in a **min-heap**, the parent node is always less than or equal to its children.\n  - **Python Equivalent:** `heapq` *(min-heap by default)*\n\n## Operations:\n\n  - **Insert:** $\\text{O(log ⁡n)}$ — Add a new element and adjust the heap to maintain the heap property.\n    - **Add the Element at the End:**\n      - Insert the new element at the end of the heap *(i.e., the next available leaf node)*.\n    - **Heapify Up (Percolate Up):**\n      - Compare the inserted element with its parent node.\n      - If the heap property *(Min-Heap or Max-Heap)* is violated *(e.g., in a Min-Heap, if the new element is smaller than its parent)*, swap the element with its parent.\n      - Repeat the process until the heap property is restored or the element becomes the root.\n  - **DeleteMax/Min:** $\\text{O(log ⁡n)}$ — Remove the root *(max or min)* and adjust the heap.\n    - **Remove the Root Element:**\n      - The root element of the heap *(the smallest element in a Min-Heap or the largest in a Max-Heap)* is removed. This is because the root element has the highest priority.\n    - **Replace the Root with the Last Element:**\n      - Move the last element in the heap *(the rightmost leaf node)* to the root position.\n    - **Heapify Down (Percolate Down):**\n      - Compare the new root element with its children.\n      - If the heap property is violated *(e.g., in a Min-Heap, if the root is greater than any of its children)*, swap the root with the smallest child *(in a Max-Heap, swap with the largest child)*.\n      - Repeat the process down the tree until the heap property is restored.\n  - **PeekMax/Min:** $O(1)$ — Access the root element.\n  - **Heapify:** $O(n)$ — Convert an unsorted array into a heap.\n\n## Use Cases:\n\n  - Often used to implement priority queues, scheduling algorithms, and for efficient sorting *(Heap Sort)*.\n\n:::\n\n<br>\n\n---\n\n::: {.lead}\n###### **Steps To Figure Out The Index Of Child Nodes in Heaps**\n:::\n\n<br>\n\n::: {.callout-note title=\"The Index Of The Right Child Of An Item In A Heap\" collapse=\"true\" appearance=\"simple\" icon=\"false\" style=\"border-left:none; border-right:none; border-top:none; border-bottom:none;\"}\n\n**heapList = [22, 33, 44, 55, 66]**\n\n  - Identify the index of the item:\n      - Find the index of the item 22 in the heap list. Let's call this index $i$.\n\n  - Use the formula for the right child:\n      - In a binary heap, if an element is at index $i$, the index of its right child is given by the formula: $2i + 2$.\n\n  - Apply the formula:\n      - Substitute the value of $i$ obtained from step 1 into the formula $2i+2$.\n\n  - Verify the index:\n      - Ensure the calculated index falls within the bounds of the heap list.\n\n:::\n\n::: {.callout-note title=\"The Index Of The Left Child Of An Item In A Heap\" collapse=\"true\" appearance=\"simple\" icon=\"false\" style=\"border-left:none; border-right:none; border-top:none; border-bottom:none;\"}\n\n**heapList = [22, 33, 44, 55, 66]**\n\n  - Identify the index of the item:\n      - Find the index of the item in the heap list. Let’s call this index $i$.\n\n  - Use the formula for the left child:\n      - In a binary heap, if an element is at index $i$, the index of its left child is given by the formula: $2i+1$.\n\n  - Apply the formula:\n      - Substitute the value of $iii$ obtained from step 1 into the formula $2i+1$.\n\n  - Verify the index:\n      - Ensure the calculated index falls within the bounds of the heap list.\n\n:::\n\n<br>\n\n---\n\n<br>\n\n::: {.lead}\n###### Set\n:::\n\n<br>\n\n::: {.panel-tabset}\n\n## Description:\n\n  - A **set** is an abstract data structure that stores unique elements, with no specific order. It supports operations that allow the management of unique collections of data.\n  - **Python Equivalent:** `set`\n\n## Operations:\n\n  - **Insert:** $O(1)$ on average — Add a new element if it’s not already present.\n  - **Delete:** $O(1)$ on average — Remove an element if it exists.\n  - **Search:** $O(1)$ on average — Check if an element is present in the set.\n  - **Union:** $O(n)$ — Combine elements from two sets.\n  - **Intersection:** $O(n)$ — Get common elements between two sets.\n  - **Difference:** $O(n)$ — Get elements present in one set but not the other.\n\n## Usage:\n\n  - Useful in situations requiring the management of unique elements, such as maintaining a list of unique IDs, handling membership checks, and performing mathematical set operations.\n\n:::\n\n<br>\n\n::: {.lead}\n###### Graph\n:::\n\n<br>\n\n::: {.panel-tabset}\n\n## Description:\n\n  - A **graph** is a collection of nodes *(vertices)* connected by edges. Graphs can be **directed** *(edges have a direction)* or **undirected** *(edges do not have a direction)*.\n  - **Python Equivalent:** `dict` of lists, `collections.defaultdict`, or custom class\n\n## Types:\n\n  - **Directed Graph (Digraph):** All edges have a direction.\n  - **Undirected Graph:** Edges do not have direction.\n  - **Weighted Graph:** Edges have weights representing costs or distances.\n  - **Unweighted Graph:** Edges have no weights.\n\n## Operations:\n\n  - **Add Vertex:** $O(1)$ — Add a new node.\n    - **Vertex:** Simply add the vertex to the vertex set.\n      - **Time Complexity:** $O(1)$.\n\n  - **Add Edge:** $O(1)$ — Add a connection between two nodes.\n    - **Edge:** Add an edge by connecting two vertices, updating adjacency lists or matrices.\n      - **Time Complexity:** $O(1)$ for adjacency list, $O(1)$ for adjacency matrix.\n\n  - **Remove Vertex:** $O(V+E)$ — Remove a node and its associated edges.\n    - **Vertex:** Remove the vertex and all associated edges.\n      - **Time Complexity:** $\\text{O(V + E)}$ in an adjacency list, $O(V^2)$ in an adjacency matrix, where V is the number of vertices and E is the number of edges.\n\n  - **Remove Edge:** $O(1)$ — Remove a connection between two nodes.\n    - **Edge:** Remove the edge between two vertices.\n      - **Time Complexity:** $O(1)$ for adjacency list, $O(1)$ for adjacency matrix.\n\n  - **Search:**\n    - **Depth-First Search (DFS):** $O(V+E)$ — Explore as far as possible along each branch before backtracking.\n    - **Breadth-First Search (BFS):** $O(V+E)$— Explore all neighbors of a node before moving to the next level.\n\n## Usage:\n\n  - Ideal for modeling relationships and connections, such as social networks, transportation networks, and dependency graphs in project management.\n\n:::\n\n<br>\n\n::: {.lead}\n##### Path Algorithms\n:::\n\n<br>\n\n::: {.callout-note title=\"Dijkstra's Shortest Path Algorithm\" collapse=\"true\" appearance=\"simple\" icon=\"false\" style=\"border-left:none; border-right:none; border-top:none; border-bottom:none;\"}\n\n  - **Overview:**\n\n    - **Type:** Greedy algorithm.\n    - **Applicability:** Works on graphs with non-negative edge weights.\n    - **Time Complexity:** $O(V2)$ for the simplest implementation, $\\text{O(V log V+E)}$ with a priority queue *(using a binary heap)*, where $V$ is the number of vertices and $E$ is the number of edges.\n    - **Functionality:** It finds the shortest path from a single source vertex to all other vertices in a graph by iteratively selecting the vertex with the smallest known distance, updating the distances to its neighbors, and marking it as visited.\n\n:::\n\n::: {.callout-note title=\"Bellman-Ford Shortest Path Algorithm\" collapse=\"true\" appearance=\"simple\" icon=\"false\" style=\"border-left:none; border-right:none; border-top:none; border-bottom:none;\"}\n\n  - **Overview:**\n\n    - **Type:** Dynamic programming algorithm.\n    - **Applicability:** Works on graphs with negative edge weights and can detect negative weight cycles.\n    - **Time Complexity:** $O(V*E)$, where $V$ is the number of vertices and $E$ is the number of edges.\n    - **Functionality:** It calculates the shortest path from a single source vertex to all other vertices by relaxing all edges repeatedly over $V−1$ iterations.\n\n:::\n\n::: {.callout-note title=\"Differences Between Dijkstra and Bellman-Ford\" collapse=\"true\" appearance=\"simple\" icon=\"false\" style=\"border-left:none; border-right:none; border-top:none; border-bottom:none;\"}\n\n| Feature Dijkstra's       | Algorithm Bellman-Ford               | Algorithm                   |\n| -------------------------|-------------------------------------:|:---------------------------:|\n| Edge Weights             | Non-negative edge weights only       | Handles negative edge weights |\n| Negative Cycle Detection | Cannot detect negative cycles        | Can detect negative cycles |\n| Time Complexity          | $O(V2)$ for the simplest implementation, $\\text{O(V log V+E)}$ with a priority queue *(using a binary heap)*, where $V$ is the number of vertices and E is the number of edges. | $O(V*E)$, where $V$ is the number of vertices and $E$ is the number of edges. |\n| Graph Type               | Directed or undirected with non-negative weights| Directed or undirected with any weights, including negative|\n| Algorithm Type           | Greedy                               | Dynamic programming          |\n| Use Case                 | Faster for graphs with non-negative weights   | More general, can be used when negative weights are present    |\n\n: Comparison chart\n\n:::\n\n<br>\n\n---\n\n::: {.lead}\n###### **Summary**\n:::\n\n<br>\n\n::: {.callout-note title=\"Summary of ADTs\" collapse=\"true\" appearance=\"simple\" icon=\"false\" style=\"border-left:none; border-right:none; border-top:none; border-bottom:none;\"}\n\n  - **Array:** Fixed-size, contiguous memory; fast access by index.\n  - **Linked List:** Dynamic size; efficient insertions and deletions.\n  - **Stack:** LIFO order; used in recursion, undo operations.\n  - **Queue:** FIFO order; used in scheduling, buffering.\n  - **Deque:** Double-ended queue; flexible insertions/deletions.\n  - **Hash Table:** Key-value pairs; fast lookups and inserts.\n  - **Tree:** Hierarchical structure; efficient searches and sorted data.\n  - **Heap:** Binary tree for priority queues; fast access to max/min.\n  - **Set:** Unique elements; fast membership checks.\n  - **Graph:** Nodes and edges; used in networks and relationship modeling.\n\n:::\n\n<br>\n\n---\n\n<br>\n\n::: {.lead}\n##### Key Operations in a Dictionary/Map\n:::\n\n<br>\n\nA **Dictionary** (in Python) or **Map** (in many other programming languages) is a data \nstructure that stores key-value pairs, where each unique key maps to a specific \nvalue. Dictionaries/Maps provide efficient insertion, deletion, and lookup \noperations, typically in $O(1)$ time on average due to the underlying hash table \nimplementation.\n\n<br>\n\n###### Insertion\n\nDescription: Adding a new key-value pair to the dictionary.\n\nSyntax:\n\n\n::: {.cell}\n\n```{.text .cell-code}\ndictionary[key] = value\n```\n:::\n\n\n\nExample:\n\n\n::: {.cell}\n\n```{.text .cell-code}\nphone_book = {}\nphone_book['Alice'] = '555-1234'\n```\n:::\n\n\nThis adds the key `'Alice'` with the value `'555-1234'` to the `phone_book` dictionary.\n\n<br>\n\n###### Lookup (Access)\n\nDescription: Retrieving the value associated with a given key.\n\nSyntax:\n\n::: {.cell}\n\n```{.text .cell-code}\nvalue = dictionary[key]\n```\n:::\n\n\n\nExample:\n\n::: {.cell}\n\n```{.text .cell-code}\nalice_number = phone_book['Alice']\n```\n:::\n\n\nThis retrieves the value associated with `'Alice'`, which is `'555-1234'`.\n\n<br>\n\n###### Deletion\n\nDescription: Removing a key-value pair from the dictionary.\n\nSyntax:\n\n::: {.cell}\n\n```{.text .cell-code}\ndel dictionary[key]\n```\n:::\n\n\n\nExample:\n\n::: {.cell}\n\n```{.text .cell-code}\ndel phone_book['Alice']\n```\n:::\n\n\nThis removes the `'Alice'` entry from the `phone_book` dictionary.\n\n<br>\n\n###### Update\n\nDescription: Updating the value associated with a given key.\n\nSyntax:\n\n::: {.cell}\n\n```{.text .cell-code}\ndictionary[key] = new_value\n```\n:::\n\n\n\nExample:\n\n::: {.cell}\n\n```{.text .cell-code}\nphone_book['Alice'] = '555-5678'\n```\n:::\n\n\n\nThis updates `'Alice's` number to `'555-5678'`.\n\n<br>\n\n###### Check Existence\n\nDescription: Checking if a key exists in the dictionary.\n\nSyntax:\n\n::: {.cell}\n\n```{.text .cell-code}\nkey in dictionary\n```\n:::\n\n\nExample:\n\n::: {.cell}\n\n```{.text .cell-code}\nif 'Alice' in phone_book:\n    print(\"Alice is in the phone book\")\n```\n:::\n\n\nThis checks if `'Alice'` is a key in `phone_book`.\n\n<br>\n\n###### Iteration\n\nDescription: Iterating over keys, values, or key-value pairs in the dictionary.\n\nSyntax:\n\n::: {.cell}\n\n```{.text .cell-code}\nIterate over keys\nfor key in dictionary:\n    print(key)\n```\n:::\n\n\nIterate over values\n\n::: {.cell}\n\n```{.text .cell-code}\nfor value in dictionary.values():\n    print(value)\n```\n:::\n\n\nIterate over key-value pairs\n\n::: {.cell}\n\n```{.text .cell-code}\nfor key, value in dictionary.items():\n    print(f\"{key}: {value}\")\n```\n:::\n\n\nExample:\n\n::: {.cell}\n\n```{.text .cell-code}\nfor name, number in phone_book.items():\n    print(f\"{name}: {number}\")\n```\n:::\n\n\nThis prints all key-value pairs in `phone_book`.\n\n<br>\n\n###### Get Method\n\nDescription: Retrieving the value associated with a given key, with an optional \ndefault if the key doesn’t exist.\n\nSyntax:\n\n::: {.cell}\n\n```{.text .cell-code}\nvalue = dictionary.get(key, default_value)\n```\n:::\n\n\nExample:\n\n::: {.cell}\n\n```{.text .cell-code}\nbob_number = phone_book.get('Bob', 'Not Found')\n```\n:::\n\n\nIf `'Bob'` is not in `phone_book`, `bob_number` will be `'Not Found'`.\n\n<br>\n\n###### Length\n\nDescription: Getting the number of key-value pairs in the dictionary.\n\nSyntax:\n\n::: {.cell}\n\n```{.text .cell-code}\nlength = len(dictionary)\n```\n:::\n\n\nExample:\n\n::: {.cell}\n\n```{.text .cell-code}\nnum_contacts = len(phone_book)\n```\n:::\n\n\nThis returns the number of entries in `phone_book`.\n\n<br>\n\n###### Clearing\n\nDescription: Removing all key-value pairs from the dictionary.\n\nSyntax:\n\n::: {.cell}\n\n```{.text .cell-code}\ndictionary.clear()\n```\n:::\n\n\nExample:\n\n::: {.cell}\n\n```{.text .cell-code}\nphone_book.clear()\n```\n:::\n\n\nThis removes all entries from `phone_book`, making it an empty dictionary.\n\n<br>\n\n###### Copying\n\nDescription: Creating a shallow copy of the dictionary.\n\nSyntax:\n\n::: {.cell}\n\n```{.text .cell-code}\nnew_dictionary = dictionary.copy()\n```\n:::\n\n\nExample:\n\n::: {.cell}\n\n```{.text .cell-code}\nbackup_phone_book = phone_book.copy()\n```\n:::\n\n\nThis creates a copy of `phone_book` called `backup_phone_book`.\n\n<br>\n\n###### Pop\n\nDescription: Removing a key from the dictionary and returning its value.\n\nSyntax:\n\n::: {.cell}\n\n```{.text .cell-code}\nvalue = dictionary.pop(key, default_value)\n```\n:::\n\n\nExample:\n\n::: {.cell}\n\n```{.text .cell-code}\nremoved_number = phone_book.pop('Alice', 'Not Found')\n```\n:::\n\n\nRemoves `'Alice'` from `phone_book` and returns her number. If `'Alice'` is not found, it returns `'Not Found'`.\n\n<br>\n\n###### Popitem\n\nDescription: Removes and returns an arbitrary key-value pair as a tuple *(key, value)*.\n\nSyntax\n\n::: {.cell}\n\n```{.text .cell-code}\nkey, value = dictionary.popitem()\n```\n:::\n\n\nExample\n\n::: {.cell}\n\n```{.text .cell-code}\nlast_entry = phone_book.popitem()\n```\n:::\n\n\nRemoves and returns the last inserted key-value pair in the dictionary.\n\n<br>\n\n###### Setdefault\n\nDescription: Returns the value of a key if it exists; otherwise, inserts the key with a specified value and returns that value.\n\nSyntax:\n\n::: {.cell}\n\n```{.text .cell-code}\nvalue = dictionary.setdefault(key, default_value)\n```\n:::\n\n\nExample:\n\n::: {.cell}\n\n```{.text .cell-code}\nalice_number = phone_book.setdefault('Alice', '555-0000')\n```\n:::\n\n\nIf `'Alice'` is in `phone_book`, it returns her number. Otherwise, it adds `'Alice': '555-0000'` to phone_book and returns `'555-0000'`.\n\n<br>\n\n## Applies Algorithms - (40%)\n\n<br>\n\nVariable declaration (dynamic vs static)\n\nThe way variables are declared and managed in programming languages can be broadly \ncategorized into **static** and **dynamic** types. This classification impacts how and \nwhen variables are allocated and accessed in memory.\n\n<br>\n\n::: {.callout-note title=\"Static Variable Declaration\" collapse=\"true\" appearance=\"simple\" icon=\"false\" style=\"border-left:none; border-right:none; border-top:none; border-bottom:none;\"}\n\n<br>\n\n###### Description\n\n  - **Static** variables are allocated memory at compile time, and their type and size are known before the program runs. The memory for static variables is typically allocated on the stack or in the data segment of memory.\n\n<br>\n\n###### Characteristics\n\n  1. **Fixed Size:** The size and type of the variable are determined at compile time.\n  2. **Memory Allocation:** Memory is allocated during compilation and deallocated when the program exits or the variable goes out of scope.\n  3. **Scope and Lifetime:**\n    - **Scope:** The scope *(visibility)* of static variables is determined by where they are declared *(e.g., within a function or globally)*.\n    - **Lifetime:** The variable's lifetime extends for the duration of the program or the block in which it is declared.\n\n<br>\n\n###### Examples\n\n**C/C++:**\n\n::: {.cell}\n\n```{.c .cell-code}\nint main() {\n    int x = 10; // Static variable\n    return 0;\n}\n```\n:::\n\n\nHere, `x` is a static variable with a fixed size and type, determined at compile time.\n\n**Java:**\n\n::: {.cell}\n\n```{.js .cell-code}\npublic class Example {\n    static int x = 10; // Static class variable\n}\n```\n:::\n\n\nIn Java, `x` is a static variable of the class `Example`, meaning it belongs to \nthe class rather than any specific instance.\n\n<br>\n\n:::\n\n<br>\n\n::: {.callout-note title=\"Dynamic Variable Declaration\" collapse=\"true\" appearance=\"simple\" icon=\"false\" style=\"border-left:none; border-right:none; border-top:none; border-bottom:none;\"}\n\n<br>\n\n###### Description\n\n  - **Dynamic** variables are allocated memory at runtime. Their type and size are determined while the program is executing, and they are often managed using dynamic memory allocation functions or constructs.\n\n<br>\n\n###### Characteristics\n\n  1. **Flexible Size:** The size and type of the variable can be determined and adjusted at runtime.\n  2. **Memory Allocation:** Memory is allocated on the heap or through dynamic memory management constructs, and deallocated when no longer needed.\n  3. **Scope and Lifetime:**\n    - **Scope:** The scope of dynamic variables is determined by how they are referenced in the code.\n    - **Lifetime:** The lifetime of a dynamic variable extends from the point of allocation to the point of deallocation.\n\n<br>\n\n###### Examples\n\n**C/C++:**\n\n::: {.cell}\n\n```{.c .cell-code}\nint* ptr = (int*) malloc(sizeof(int)); // Dynamic memory allocation\n*ptr = 10;\nfree(ptr); // Deallocate memory\n```\n:::\n\n\n**Python:**\n\n::: {.cell}\n\n```{.r .cell-code}\nx = [10]  # Dynamic variable (list with one element)\nx.append(20)  # Modify the list\n```\n:::\n\n\nIn Python, `x` can dynamically grow in size as new elements are added to the list.\n\n<br>\n\n:::\n\n<br>\n",
    "supporting": [
      "courseC949_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"site_libs/vembedr-0.1.5/css/vembedr.css\" rel=\"stylesheet\" />\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}