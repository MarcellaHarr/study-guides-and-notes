# DSA I {.unnumbered}

```{r include=FALSE}
install.packages("vembedr")
library(vembedr)
```

::: {.lead}

Data Structures and Algorithms I (C949)

:::

<br>

## Explains Algorithms (29%)

<br>

#### Characteristics of Algorithms

::: {.callout-note title="Names" collapse="true" appearance="simple" icon="false" style="border-left:none; border-right:none; border-top:none; border-bottom:none;"}

**Finiteness**

An algorithm must always have a finite number of steps before it ends. When the 
operation is finished, it must have a defined endpoint or output and not enter 
an endless loop.

**Definiteness**

An algorithm needs to have exact definitions for each step. Clear and 
straightforward directions ensure that every step is understood and can be 
taken easily.

**Input**

An algorithm requires one or more inputs. The values that are first supplied to 
the algorithm before its processing are known as inputs. These inputs come from 
a predetermined range of acceptable values.

**Output**

One or more outputs must be produced by an algorithm. The output is the outcome 
of the algorithm after every step has been completed. The relationship between 
the input and the result should be clear.

**Effectiveness**

An algorithm's stages must be sufficiently straightforward to be carried out in 
a finite time utilizing fundamental operations. With the resources at hand, 
every operation in the algorithm should be doable and practicable.

**Generality**

Rather than being limited to a single particular case, an algorithm should be 
able to solve a group of issues. It should offer a generic fix that manages a 
variety of inputs inside a predetermined range or domain.

:::

<br>

#### Factors of an Algorithm

::: {.callout-note title="Factors" collapse="true" appearance="simple" icon="false" style="border-left:none; border-right:none; border-top:none; border-bottom:none;"}
`**Modularity**`

This feature was perfectly designed for the algorithm if you are given a problem and break it down into small-small modules or small-small steps, which is a basic definition of an algorithm.

**Correctness**

An algorithm's correctness is defined as when the given inputs produce the desired output, indicating that the algorithm was designed correctly. An algorithm's analysis has been completed correctly.

**Maintainability**

It means that the algorithm should be designed in a straightforward, structured way so that when you redefine the algorithm, no significant changes are made to the algorithm.

**Functionality**

It takes into account various logical steps to solve a real-world problem.

**Robustness**

Robustness refers to an algorithm's ability to define your problem clearly.

**User-friendly**

If the algorithm is difficult to understand, the designer will not explain it to the programmer.

**Simplicity**

If an algorithm is simple, it is simple to understand.

`**Extensibility**`

Your algorithm should be extensible if another algorithm designer or programmer wants to use it.
:::

<br>

#### Types of Algorithms

<br>

::: {.lead}
##### Types
:::

::: {.panel-tabset}

## Type-1

<br>

```{r bruteVid, echo=FALSE}
embed_youtube(
  id = "BYWf6-tpQ4k",
  width = NULL,
  height = 315,
  ratio = "16by9",
  frameborder = 0,
  allowfullscreen = TRUE,
  query = NULL)
```

**Brute Force Algorithm**

A straightforward approach that exhaustively tries all possible solutions, 
suitable for small problem instances but may become impractical for larger 
ones due to its high time complexity.

---

```{r recursiveVid, echo=FALSE}
embed_youtube(
  id = "ivl5-snqul8",
  width = NULL,
  height = 315,
  ratio = "16by9",
  frameborder = 0,
  allowfullscreen = TRUE,
  query = NULL)
```


**Recursive Algorithm**

A method that breaks a problem into smaller, similar subproblems and repeatedly 
applies itself to solve them until reaching a base case, making it effective 
for tasks with recursive structures.

---

```{r encryptVid, echo=FALSE}
embed_youtube(
  id = "0TCY1rfpjxc",
  width = NULL,
  height = 315,
  ratio = "16by9",
  frameborder = 0,
  allowfullscreen = TRUE,
  query = NULL)
```


**Encryption Algorithm** 

Utilized to transform data into a secure, unreadable form using cryptographic 
techniques, ensuring confidentiality and privacy in digital communications and 
transactions.

## Type-2

<br>

```{r backtickVid, echo=FALSE}
embed_youtube(
  id = "RtpJOGvfo7E",
  width = NULL,
  height = 315,
  ratio = "16by9",
  frameborder = 0,
  allowfullscreen = TRUE,
  query = NULL)
```


**Backtracking Algorithm**

A trial-and-error technique used to explore potential solutions by undoing 
choices when they lead to an incorrect outcome, commonly employed in puzzles 
and optimization problems.

---

```{r searchVid, echo=FALSE}
embed_youtube(
  id = "ZpFqAoO4YPc",
  width = NULL,
  height = 315,
  ratio = "16by9",
  frameborder = 0,
  allowfullscreen = TRUE,
  query = NULL)
```


**Searching Algorithm**

Designed to find a specific target within a data set, enabling efficient 
retrieval of information from sorted or unsorted collections.

---

```{r sortVid, echo=FALSE}
embed_youtube(
  id = "rbbTd-gkajw",
  width = NULL,
  height = 315,
  ratio = "16by9",
  frameborder = 0,
  allowfullscreen = TRUE,
  query = NULL)
```


**Sorting Algorithm**

Aimed at arranging elements in a specific order, like numerical or alphabetical, 
to enhance data organization and retrieval.

## Type-3

<br>

```{r hashVid_1, echo=FALSE}
embed_youtube(
  id = "WEILxTBDy0Y",
  width = NULL,
  height = 315,
  ratio = "16by9",
  frameborder = 0,
  allowfullscreen = TRUE,
  query = NULL)
```

```{r hashVid_2, echo=FALSE}
embed_youtube(
  id = "FsfRsGFHuv4",
  width = NULL,
  height = 315,
  ratio = "16by9",
  frameborder = 0,
  allowfullscreen = TRUE,
  query = NULL)
```


**Hashing Algorithm** 

Converts data into a fixed-size hash value, enabling rapid data access and 
retrieval in hash tables, commonly used in databases and password storage.

---

```{r divideVid, echo=FALSE}
embed_youtube(
  id = "ib4BHvr5-Ao",
  width = NULL,
  height = 315,
  ratio = "16by9",
  frameborder = 0,
  allowfullscreen = TRUE,
  query = NULL)
```


**Divide & Conquer Algorithm**

Breaks a complex problem into smaller subproblems, solves them independently, 
and then combines their solutions to address the original problem effectively.

---

```{r greedyVid, echo=FALSE}
embed_youtube(
  id = "hDDrIw_DSto",
  width = NULL,
  height = 315,
  ratio = "16by9",
  frameborder = 0,
  allowfullscreen = TRUE,
  query = NULL)
```


**Greedy Algorithm**

Makes locally optimal choices at each step in the hope of finding a global 
optimum, useful for optimization problems but may not always lead to the best 
solution.

## Type-4

<br>

```{r dynamicVid, echo=FALSE}
embed_youtube(
  id = "vYquumk4nWw",
  width = NULL,
  height = 315,
  ratio = "16by9",
  frameborder = 0,
  allowfullscreen = TRUE,
  query = NULL)
```


**Dynamic Programming Algorithm**

Stores and reuses intermediate results to avoid redundant computations, 
enhancing the efficiency of solving complex problems.

---

```{r randomVid, echo=FALSE}
embed_youtube(
  id = "8t9RaIQzp_o",
  width = NULL,
  height = 315,
  ratio = "16by9",
  frameborder = 0,
  allowfullscreen = TRUE,
  query = NULL)
```


**Randomized Algorithm**

Utilizes randomness in its steps to achieve a solution, often used in situations 
where an approximate or probabilistic answer suffices.

:::
